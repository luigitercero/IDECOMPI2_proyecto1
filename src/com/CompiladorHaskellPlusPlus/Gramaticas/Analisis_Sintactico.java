
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Sun Mar 12 22:53:14 CST 2017
//----------------------------------------------------

package com.CompiladorHaskellPlusPlus.Gramaticas;

import java_cup.runtime.*;
import com.ParserTree.*;

/** CUP v0.10k generated parser.
  * @version Sun Mar 12 22:53:14 CST 2017
  */
public class Analisis_Sintactico extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Analisis_Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  public Analisis_Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\163\000\002\002\004\000\002\003\003\000\002\004" +
    "\004\000\002\004\003\000\002\005\003\000\002\005\003" +
    "\000\002\005\003\000\002\005\005\000\002\005\003\000" +
    "\002\012\006\000\002\012\005\000\002\030\005\000\002" +
    "\030\003\000\002\036\005\000\002\036\003\000\002\006" +
    "\007\000\002\014\004\000\002\014\003\000\002\015\004" +
    "\000\002\015\003\000\002\035\003\000\002\035\003\000" +
    "\002\035\005\000\002\035\005\000\002\035\005\000\002" +
    "\037\004\000\002\040\006\000\002\040\004\000\002\040" +
    "\006\000\002\041\006\000\002\041\004\000\002\041\006" +
    "\000\002\042\004\000\002\043\004\000\002\044\004\000" +
    "\002\045\004\000\002\046\004\000\002\007\003\000\002" +
    "\007\003\000\002\007\003\000\002\007\003\000\002\007" +
    "\003\000\002\007\003\000\002\007\003\000\002\007\003" +
    "\000\002\007\003\000\002\047\004\000\002\050\004\000" +
    "\002\051\004\000\002\053\004\000\002\052\004\000\002" +
    "\021\003\000\002\021\003\000\002\021\003\000\002\021" +
    "\003\000\002\021\003\000\002\022\003\000\002\022\005" +
    "\000\002\022\003\000\002\022\005\000\002\022\003\000" +
    "\002\055\003\000\002\055\003\000\002\055\003\000\002" +
    "\033\003\000\002\033\005\000\002\033\005\000\002\033" +
    "\003\000\002\054\005\000\002\010\005\000\002\020\005" +
    "\000\002\031\005\000\002\031\003\000\002\032\005\000" +
    "\002\032\003\000\002\032\003\000\002\032\005\000\002" +
    "\013\005\000\002\013\005\000\002\013\005\000\002\013" +
    "\005\000\002\013\005\000\002\013\005\000\002\013\005" +
    "\000\002\013\004\000\002\013\005\000\002\013\003\000" +
    "\002\013\003\000\002\013\003\000\002\013\003\000\002" +
    "\013\005\000\002\013\005\000\002\013\003\000\002\013" +
    "\003\000\002\023\005\000\002\023\005\000\002\023\003" +
    "\000\002\024\005\000\002\024\005\000\002\024\005\000" +
    "\002\024\005\000\002\024\005\000\002\024\005\000\002" +
    "\026\005\000\002\026\003\000\002\026\003\000\002\016" +
    "\011\000\002\017\006\000\002\025\006\000\002\025\005" +
    "\000\002\034\003\000\002\034\003\000\002\011\005\000" +
    "\002\027\005\000\002\027\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\321\000\034\015\024\017\026\021\016\022\034\023" +
    "\021\024\017\025\030\026\031\030\006\031\007\037\012" +
    "\062\043\065\004\001\002\000\050\002\uffc3\015\uffc3\017" +
    "\uffc3\020\uffc3\021\uffc3\022\uffc3\023\uffc3\024\uffc3\025\uffc3" +
    "\026\uffc3\027\uffc3\030\uffc3\031\uffc3\037\uffc3\041\uffc3\044" +
    "\uffc3\062\uffc3\065\uffc3\067\uffc3\001\002\000\050\002\uffc7" +
    "\015\uffc7\017\uffc7\020\uffc7\021\uffc7\022\uffc7\023\uffc7\024" +
    "\uffc7\025\uffc7\026\uffc7\027\uffc7\030\uffc7\031\uffc7\037\uffc7" +
    "\041\uffc7\044\uffc7\062\uffc7\065\uffc7\067\uffc7\001\002\000" +
    "\014\015\077\017\026\021\016\062\055\065\004\001\002" +
    "\000\014\015\077\017\026\021\016\062\055\065\004\001" +
    "\002\000\036\002\uffd4\015\uffd4\017\uffd4\021\uffd4\022\uffd4" +
    "\023\uffd4\024\uffd4\025\uffd4\026\uffd4\030\uffd4\031\uffd4\037" +
    "\uffd4\062\uffd4\065\uffd4\001\002\000\036\002\uffd6\015\uffd6" +
    "\017\uffd6\021\uffd6\022\uffd6\023\uffd6\024\uffd6\025\uffd6\026" +
    "\uffd6\030\uffd6\031\uffd6\037\uffd6\062\uffd6\065\uffd6\001\002" +
    "\000\014\015\077\017\026\021\016\062\055\065\004\001" +
    "\002\000\036\002\uffd5\015\uffd5\017\uffd5\021\uffd5\022\uffd5" +
    "\023\uffd5\024\uffd5\025\uffd5\026\uffd5\030\uffd5\031\uffd5\037" +
    "\uffd5\062\uffd5\065\uffd5\001\002\000\036\002\ufffb\015\ufffb" +
    "\017\ufffb\021\ufffb\022\ufffb\023\ufffb\024\ufffb\025\ufffb\026" +
    "\ufffb\030\ufffb\031\ufffb\037\ufffb\062\ufffb\065\ufffb\001\002" +
    "\000\006\027\314\067\103\001\002\000\050\002\uffc4\015" +
    "\uffc4\017\uffc4\020\uffc4\021\uffc4\022\uffc4\023\uffc4\024\uffc4" +
    "\025\uffc4\026\uffc4\027\uffc4\030\uffc4\031\uffc4\037\uffc4\041" +
    "\uffc4\044\uffc4\062\uffc4\065\uffc4\067\uffc4\001\002\000\006" +
    "\015\307\021\306\001\002\000\036\002\ufffe\015\ufffe\017" +
    "\ufffe\021\ufffe\022\ufffe\023\ufffe\024\ufffe\025\ufffe\026\ufffe" +
    "\030\ufffe\031\ufffe\037\ufffe\062\ufffe\065\ufffe\001\002\000" +
    "\006\015\301\021\300\001\002\000\036\002\000\015\024" +
    "\017\026\021\016\022\034\023\021\024\017\025\030\026" +
    "\031\030\006\031\007\037\012\062\043\065\004\001\002" +
    "\000\036\002\uffd7\015\uffd7\017\uffd7\021\uffd7\022\uffd7\023" +
    "\uffd7\024\uffd7\025\uffd7\026\uffd7\030\uffd7\031\uffd7\037\uffd7" +
    "\062\uffd7\065\uffd7\001\002\000\020\016\177\032\070\033" +
    "\073\034\065\035\066\036\075\062\100\001\002\000\036" +
    "\002\ufffc\015\ufffc\017\ufffc\021\ufffc\022\ufffc\023\ufffc\024" +
    "\ufffc\025\ufffc\026\ufffc\030\ufffc\031\ufffc\037\ufffc\062\ufffc" +
    "\065\ufffc\001\002\000\016\015\253\017\252\021\016\062" +
    "\055\065\004\066\260\001\002\000\036\002\uffda\015\uffda" +
    "\017\uffda\021\uffda\022\uffda\023\uffda\024\uffda\025\uffda\026" +
    "\uffda\030\uffda\031\uffda\037\uffda\062\uffda\065\uffda\001\002" +
    "\000\014\015\077\017\026\021\016\062\055\065\004\001" +
    "\002\000\014\015\077\017\026\021\016\062\055\065\004" +
    "\001\002\000\036\002\uffdb\015\uffdb\017\uffdb\021\uffdb\022" +
    "\uffdb\023\uffdb\024\uffdb\025\uffdb\026\uffdb\030\uffdb\031\uffdb" +
    "\037\uffdb\062\uffdb\065\uffdb\001\002\000\036\002\uffd9\015" +
    "\uffd9\017\uffd9\021\uffd9\022\uffd9\023\uffd9\024\uffd9\025\uffd9" +
    "\026\uffd9\030\uffd9\031\uffd9\037\uffd9\062\uffd9\065\uffd9\001" +
    "\002\000\024\005\213\013\221\015\210\021\211\062\217" +
    "\063\214\064\215\065\212\066\220\001\002\000\036\002" +
    "\ufffd\015\ufffd\017\ufffd\021\ufffd\022\ufffd\023\ufffd\024\ufffd" +
    "\025\ufffd\026\ufffd\030\ufffd\031\ufffd\037\ufffd\062\ufffd\065" +
    "\ufffd\001\002\000\050\002\uffc5\015\uffc5\017\uffc5\020\uffc5" +
    "\021\uffc5\022\uffc5\023\uffc5\024\uffc5\025\uffc5\026\uffc5\027" +
    "\uffc5\030\uffc5\031\uffc5\037\uffc5\041\uffc5\044\uffc5\062\uffc5" +
    "\065\uffc5\067\uffc5\001\002\000\036\002\uffdc\015\uffdc\017" +
    "\uffdc\021\uffdc\022\uffdc\023\uffdc\024\uffdc\025\uffdc\026\uffdc" +
    "\030\uffdc\031\uffdc\037\uffdc\062\uffdc\065\uffdc\001\002\000" +
    "\036\002\uffd8\015\uffd8\017\uffd8\021\uffd8\022\uffd8\023\uffd8" +
    "\024\uffd8\025\uffd8\026\uffd8\030\uffd8\031\uffd8\037\uffd8\062" +
    "\uffd8\065\uffd8\001\002\000\042\002\ufff9\015\ufff9\017\ufff9" +
    "\021\ufff9\022\ufff9\023\ufff9\024\ufff9\025\ufff9\026\ufff9\027" +
    "\uffc9\030\ufff9\031\ufff9\037\ufff9\062\ufff9\065\ufff9\067\uffc9" +
    "\001\002\000\004\002\207\001\002\000\012\027\uffc2\040" +
    "\045\062\046\067\uffc2\001\002\000\006\047\113\062\114" +
    "\001\002\000\016\015\051\017\026\021\016\041\050\062" +
    "\055\065\004\001\002\000\006\047\ufff0\062\ufff0\001\002" +
    "\000\010\041\ufff3\044\ufff3\067\103\001\002\000\036\002" +
    "\ufff7\015\ufff7\017\ufff7\021\ufff7\022\ufff7\023\ufff7\024\ufff7" +
    "\025\ufff7\026\ufff7\030\ufff7\031\ufff7\037\ufff7\062\ufff7\065" +
    "\ufff7\001\002\000\046\015\077\017\026\021\016\022\034" +
    "\023\021\024\017\025\030\026\031\030\006\031\007\032" +
    "\070\033\073\034\065\035\066\036\075\037\012\062\067" +
    "\065\004\001\002\000\006\041\ufff5\044\ufff5\001\002\000" +
    "\006\041\056\044\057\001\002\000\050\002\uffc9\015\uffc9" +
    "\017\uffc9\020\uffc9\021\uffc9\022\uffc9\023\uffc9\024\uffc9\025" +
    "\uffc9\026\uffc9\027\uffc9\030\uffc9\031\uffc9\037\uffc9\041\uffc9" +
    "\044\uffc9\062\uffc9\065\uffc9\067\uffc9\001\002\000\050\002" +
    "\uffc2\015\uffc2\017\uffc2\020\uffc2\021\uffc2\022\uffc2\023\uffc2" +
    "\024\uffc2\025\uffc2\026\uffc2\027\uffc2\030\uffc2\031\uffc2\037" +
    "\uffc2\041\uffc2\044\uffc2\062\uffc2\065\uffc2\067\uffc2\001\002" +
    "\000\036\002\ufff8\015\ufff8\017\ufff8\021\ufff8\022\ufff8\023" +
    "\ufff8\024\ufff8\025\ufff8\026\ufff8\030\ufff8\031\ufff8\037\ufff8" +
    "\062\ufff8\065\ufff8\001\002\000\014\015\051\017\026\021" +
    "\016\062\055\065\004\001\002\000\006\041\ufff6\044\ufff6" +
    "\001\002\000\004\015\112\001\002\000\004\015\uffcd\001" +
    "\002\000\004\015\uffce\001\002\000\004\015\uffca\001\002" +
    "\000\014\015\077\017\026\021\016\062\055\065\004\001" +
    "\002\000\014\015\077\017\026\021\016\062\055\065\004" +
    "\001\002\000\010\027\uffc2\040\045\067\uffc2\001\002\000" +
    "\014\015\077\017\026\021\016\062\055\065\004\001\002" +
    "\000\004\015\uffcc\001\002\000\004\015\uffcb\001\002\000" +
    "\014\015\077\017\026\021\016\062\055\065\004\001\002" +
    "\000\004\015\105\001\002\000\014\015\077\017\026\021" +
    "\016\062\055\065\004\001\002\000\004\015\101\001\002" +
    "\000\016\032\070\033\073\034\065\035\066\036\075\062" +
    "\100\001\002\000\004\040\045\001\002\000\050\002\uffc8" +
    "\015\uffc8\017\uffc8\020\uffc8\021\uffc8\022\uffc8\023\uffc8\024" +
    "\uffc8\025\uffc8\026\uffc8\027\uffc8\030\uffc8\031\uffc8\037\uffc8" +
    "\041\uffc8\044\uffc8\062\uffc8\065\uffc8\067\uffc8\001\002\000" +
    "\006\015\uffd0\067\103\001\002\000\014\015\077\017\026" +
    "\021\016\062\055\065\004\001\002\000\050\002\uffbd\015" +
    "\uffbd\017\uffbd\020\uffbd\021\uffbd\022\uffbd\023\uffbd\024\uffbd" +
    "\025\uffbd\026\uffbd\027\uffbd\030\uffbd\031\uffbd\037\uffbd\041" +
    "\uffbd\044\uffbd\062\uffbd\065\uffbd\067\uffbd\001\002\000\050" +
    "\002\uffc6\015\uffc6\017\uffc6\020\uffc6\021\uffc6\022\uffc6\023" +
    "\uffc6\024\uffc6\025\uffc6\026\uffc6\027\uffc6\030\uffc6\031\uffc6" +
    "\037\uffc6\041\uffc6\044\uffc6\062\uffc6\065\uffc6\067\uffc6\001" +
    "\002\000\006\015\uffd2\067\103\001\002\000\006\015\uffd3" +
    "\067\103\001\002\000\006\015\uffcf\067\103\001\002\000" +
    "\006\015\uffd1\067\103\001\002\000\006\041\ufff4\044\ufff4" +
    "\001\002\000\010\015\115\042\116\052\120\001\002\000" +
    "\006\047\ufff1\062\ufff1\001\002\000\036\015\077\016\177" +
    "\017\026\021\016\022\034\023\021\024\017\025\030\026" +
    "\031\030\006\031\007\037\012\062\067\065\004\001\002" +
    "\000\010\015\126\021\125\062\127\001\002\000\012\015" +
    "\115\042\116\046\145\052\120\001\002\000\010\015\126" +
    "\021\125\062\127\001\002\000\020\015\uffec\042\uffec\045" +
    "\uffec\046\uffec\052\uffec\063\uffec\066\uffec\001\002\000\020" +
    "\015\uffee\042\uffee\045\uffee\046\uffee\052\uffee\063\uffee\066" +
    "\uffee\001\002\000\020\015\uffed\042\uffed\045\uffed\046\uffed" +
    "\052\uffed\063\uffed\066\uffed\001\002\000\006\063\132\066" +
    "\135\001\002\000\066\002\uff98\015\uff98\017\uff98\021\uff98" +
    "\022\uff98\023\uff98\024\uff98\025\uff98\026\uff98\027\uff98\030" +
    "\uff98\031\uff98\037\uff98\043\uff98\050\uff98\053\uff98\054\uff98" +
    "\055\uff98\056\uff98\057\uff98\060\uff98\061\uff98\062\uff98\063" +
    "\uff98\065\uff98\066\uff98\001\002\000\034\015\077\017\026" +
    "\021\016\022\034\023\021\024\017\025\030\026\031\030" +
    "\006\031\007\037\012\062\055\065\004\001\002\000\066" +
    "\002\uff99\015\uff99\017\uff99\021\uff99\022\uff99\023\uff99\024" +
    "\uff99\025\uff99\026\uff99\027\uff99\030\uff99\031\uff99\037\uff99" +
    "\043\uff99\050\uff99\053\uff99\054\uff99\055\uff99\056\uff99\057" +
    "\uff99\060\uff99\061\uff99\062\uff99\063\uff99\065\uff99\066\uff99" +
    "\001\002\000\004\015\131\001\002\000\066\002\uff9a\015" +
    "\uff9a\017\uff9a\021\uff9a\022\uff9a\023\uff9a\024\uff9a\025\uff9a" +
    "\026\uff9a\027\uff9a\030\uff9a\031\uff9a\037\uff9a\043\uff9a\050" +
    "\uff9a\053\uff9a\054\uff9a\055\uff9a\056\uff9a\057\uff9a\060\uff9a" +
    "\061\uff9a\062\uff9a\063\uff9a\065\uff9a\066\uff9a\001\002\000" +
    "\004\051\uff93\001\002\000\004\051\143\001\002\000\010" +
    "\046\136\063\132\066\135\001\002\000\004\051\uff92\001" +
    "\002\000\020\015\uff96\042\uff96\045\uff96\046\uff96\052\uff96" +
    "\063\uff96\066\uff96\001\002\000\004\051\140\001\002\000" +
    "\010\015\115\042\116\052\120\001\002\000\016\015\115" +
    "\042\116\046\uff95\052\120\063\uff95\066\uff95\001\002\000" +
    "\020\015\uffef\042\uffef\045\uffef\046\uffef\052\uffef\063\uffef" +
    "\066\uffef\001\002\000\010\015\115\042\116\052\120\001" +
    "\002\000\016\015\115\042\116\046\uff94\052\120\063\uff94" +
    "\066\uff94\001\002\000\036\002\ufff2\015\ufff2\017\ufff2\021" +
    "\ufff2\022\ufff2\023\ufff2\024\ufff2\025\ufff2\026\ufff2\030\ufff2" +
    "\031\ufff2\037\ufff2\062\ufff2\065\ufff2\001\002\000\016\050" +
    "\162\053\165\054\164\055\167\056\163\057\166\001\002" +
    "\000\010\043\153\060\151\061\152\001\002\000\010\043" +
    "\uffa1\060\uffa1\061\uffa1\001\002\000\010\015\126\021\125" +
    "\062\127\001\002\000\010\015\126\021\125\062\127\001" +
    "\002\000\010\015\115\042\116\052\120\001\002\000\012" +
    "\015\115\042\116\045\155\052\120\001\002\000\010\015" +
    "\115\042\116\052\120\001\002\000\012\015\115\042\116" +
    "\046\157\052\120\001\002\000\020\015\uff97\042\uff97\045" +
    "\uff97\046\uff97\052\uff97\063\uff97\066\uff97\001\002\000\010" +
    "\043\uffa2\060\151\061\uffa2\001\002\000\010\043\uffa3\060" +
    "\uffa3\061\uffa3\001\002\000\010\015\126\021\125\062\127" +
    "\001\002\000\010\015\126\021\125\062\127\001\002\000" +
    "\010\015\126\021\125\062\127\001\002\000\010\015\126" +
    "\021\125\062\127\001\002\000\010\015\126\021\125\062" +
    "\127\001\002\000\010\015\126\021\125\062\127\001\002" +
    "\000\010\043\uffa0\060\uffa0\061\uffa0\001\002\000\010\043" +
    "\uff9b\060\uff9b\061\uff9b\001\002\000\010\043\uff9f\060\uff9f" +
    "\061\uff9f\001\002\000\010\043\uff9d\060\uff9d\061\uff9d\001" +
    "\002\000\010\043\uff9e\060\uff9e\061\uff9e\001\002\000\010" +
    "\043\uff9c\060\uff9c\061\uff9c\001\002\000\004\015\206\001" +
    "\002\000\004\062\204\001\002\000\004\015\203\001\002" +
    "\000\004\015\202\001\002\000\020\015\uffeb\042\uffeb\045" +
    "\uffeb\046\uffeb\052\uffeb\063\uffeb\066\uffeb\001\002\000\020" +
    "\015\uffe9\042\uffe9\045\uffe9\046\uffe9\052\uffe9\063\uffe9\066" +
    "\uffe9\001\002\000\014\015\077\017\026\021\016\062\055" +
    "\065\004\001\002\000\006\015\uffbc\067\103\001\002\000" +
    "\020\015\uffea\042\uffea\045\uffea\046\uffea\052\uffea\063\uffea" +
    "\066\uffea\001\002\000\004\002\001\001\002\000\034\015" +
    "\077\017\026\021\016\022\034\023\021\024\017\025\030" +
    "\026\031\030\006\031\007\037\012\062\067\065\004\001" +
    "\002\000\056\002\uffa8\004\uffa8\005\uffa8\006\uffa8\007\uffa8" +
    "\010\uffa8\011\uffa8\012\uffa8\014\uffa8\015\uffa8\017\uffa8\021" +
    "\uffa8\022\uffa8\023\uffa8\024\uffa8\025\uffa8\026\uffa8\030\uffa8" +
    "\031\uffa8\037\uffa8\062\uffa8\065\uffa8\001\002\000\056\002" +
    "\uffa5\004\uffa5\005\uffa5\006\uffa5\007\uffa5\010\uffa5\011\uffa5" +
    "\012\uffa5\014\uffa5\015\uffa5\017\uffa5\021\uffa5\022\uffa5\023" +
    "\uffa5\024\uffa5\025\uffa5\026\uffa5\030\uffa5\031\uffa5\037\uffa5" +
    "\062\uffa5\065\uffa5\001\002\000\024\005\213\013\221\015" +
    "\210\021\211\062\217\063\214\064\215\065\212\066\220" +
    "\001\002\000\056\002\uffab\004\uffab\005\uffab\006\uffab\007" +
    "\uffab\010\uffab\011\uffab\012\uffab\014\uffab\015\uffab\017\uffab" +
    "\021\uffab\022\uffab\023\uffab\024\uffab\025\uffab\026\uffab\030" +
    "\uffab\031\uffab\037\uffab\062\uffab\065\uffab\001\002\000\056" +
    "\002\uffaa\004\uffaa\005\uffaa\006\uffaa\007\uffaa\010\uffaa\011" +
    "\uffaa\012\uffaa\014\uffaa\015\uffaa\017\uffaa\021\uffaa\022\uffaa" +
    "\023\uffaa\024\uffaa\025\uffaa\026\uffaa\030\uffaa\031\uffaa\037" +
    "\uffaa\062\uffaa\065\uffaa\001\002\000\054\002\uffe8\004\225" +
    "\005\226\006\223\007\232\010\224\011\227\012\231\015" +
    "\uffe8\017\uffe8\021\uffe8\022\uffe8\023\uffe8\024\uffe8\025\uffe8" +
    "\026\uffe8\030\uffe8\031\uffe8\037\uffe8\062\uffe8\065\uffe8\001" +
    "\002\000\056\002\uffa9\004\uffa9\005\uffa9\006\uffa9\007\uffa9" +
    "\010\uffa9\011\uffa9\012\uffa9\014\uffa9\015\uffa9\017\uffa9\021" +
    "\uffa9\022\uffa9\023\uffa9\024\uffa9\025\uffa9\026\uffa9\030\uffa9" +
    "\031\uffa9\037\uffa9\062\uffa9\065\uffa9\001\002\000\056\002" +
    "\uffa4\004\uffa4\005\uffa4\006\uffa4\007\uffa4\010\uffa4\011\uffa4" +
    "\012\uffa4\014\uffa4\015\uffa4\017\uffa4\021\uffa4\022\uffa4\023" +
    "\uffa4\024\uffa4\025\uffa4\026\uffa4\030\uffa4\031\uffa4\037\uffa4" +
    "\062\uffa4\065\uffa4\001\002\000\024\005\213\013\221\015" +
    "\210\021\211\062\217\063\214\064\215\065\212\066\220" +
    "\001\002\000\022\004\225\005\226\006\223\007\232\010" +
    "\224\011\227\012\231\014\230\001\002\000\024\005\213" +
    "\013\221\015\210\021\211\062\217\063\214\064\215\065" +
    "\212\066\220\001\002\000\024\005\213\013\221\015\210" +
    "\021\211\062\217\063\214\064\215\065\212\066\220\001" +
    "\002\000\024\005\213\013\221\015\210\021\211\062\217" +
    "\063\214\064\215\065\212\066\220\001\002\000\024\005" +
    "\213\013\221\015\210\021\211\062\217\063\214\064\215" +
    "\065\212\066\220\001\002\000\024\005\213\013\221\015" +
    "\210\021\211\062\217\063\214\064\215\065\212\066\220" +
    "\001\002\000\056\002\uffac\004\uffac\005\uffac\006\uffac\007" +
    "\uffac\010\uffac\011\uffac\012\uffac\014\uffac\015\uffac\017\uffac" +
    "\021\uffac\022\uffac\023\uffac\024\uffac\025\uffac\026\uffac\030" +
    "\uffac\031\uffac\037\uffac\062\uffac\065\uffac\001\002\000\024" +
    "\005\213\013\221\015\210\021\211\062\217\063\214\064" +
    "\215\065\212\066\220\001\002\000\024\005\213\013\221" +
    "\015\210\021\211\062\217\063\214\064\215\065\212\066" +
    "\220\001\002\000\056\002\uffb1\004\uffb1\005\uffb1\006\uffb1" +
    "\007\uffb1\010\uffb1\011\227\012\231\014\uffb1\015\uffb1\017" +
    "\uffb1\021\uffb1\022\uffb1\023\uffb1\024\uffb1\025\uffb1\026\uffb1" +
    "\030\uffb1\031\uffb1\037\uffb1\062\uffb1\065\uffb1\001\002\000" +
    "\056\002\uffae\004\uffae\005\uffae\006\uffae\007\uffae\010\uffae" +
    "\011\uffae\012\uffae\014\uffae\015\uffae\017\uffae\021\uffae\022" +
    "\uffae\023\uffae\024\uffae\025\uffae\026\uffae\030\uffae\031\uffae" +
    "\037\uffae\062\uffae\065\uffae\001\002\000\056\002\uffaf\004" +
    "\uffaf\005\uffaf\006\uffaf\007\uffaf\010\uffaf\011\uffaf\012\uffaf" +
    "\014\uffaf\015\uffaf\017\uffaf\021\uffaf\022\uffaf\023\uffaf\024" +
    "\uffaf\025\uffaf\026\uffaf\030\uffaf\031\uffaf\037\uffaf\062\uffaf" +
    "\065\uffaf\001\002\000\056\002\uffb3\004\uffb3\005\uffb3\006" +
    "\223\007\232\010\224\011\227\012\231\014\uffb3\015\uffb3" +
    "\017\uffb3\021\uffb3\022\uffb3\023\uffb3\024\uffb3\025\uffb3\026" +
    "\uffb3\030\uffb3\031\uffb3\037\uffb3\062\uffb3\065\uffb3\001\002" +
    "\000\056\002\uffb4\004\uffb4\005\uffb4\006\223\007\232\010" +
    "\224\011\227\012\231\014\uffb4\015\uffb4\017\uffb4\021\uffb4" +
    "\022\uffb4\023\uffb4\024\uffb4\025\uffb4\026\uffb4\030\uffb4\031" +
    "\uffb4\037\uffb4\062\uffb4\065\uffb4\001\002\000\056\002\uffb0" +
    "\004\uffb0\005\uffb0\006\uffb0\007\uffb0\010\uffb0\011\227\012" +
    "\231\014\uffb0\015\uffb0\017\uffb0\021\uffb0\022\uffb0\023\uffb0" +
    "\024\uffb0\025\uffb0\026\uffb0\030\uffb0\031\uffb0\037\uffb0\062" +
    "\uffb0\065\uffb0\001\002\000\056\002\uffb2\004\uffb2\005\uffb2" +
    "\006\uffb2\007\uffb2\010\uffb2\011\227\012\231\014\uffb2\015" +
    "\uffb2\017\uffb2\021\uffb2\022\uffb2\023\uffb2\024\uffb2\025\uffb2" +
    "\026\uffb2\030\uffb2\031\uffb2\037\uffb2\062\uffb2\065\uffb2\001" +
    "\002\000\056\002\uffad\004\uffad\005\uffad\006\223\007\232" +
    "\010\224\011\227\012\231\014\uffad\015\uffad\017\uffad\021" +
    "\uffad\022\uffad\023\uffad\024\uffad\025\uffad\026\uffad\030\uffad" +
    "\031\uffad\037\uffad\062\uffad\065\uffad\001\002\000\004\015" +
    "\246\001\002\000\004\015\245\001\002\000\056\002\uffa6" +
    "\004\uffa6\005\uffa6\006\uffa6\007\uffa6\010\uffa6\011\uffa6\012" +
    "\uffa6\014\uffa6\015\uffa6\017\uffa6\021\uffa6\022\uffa6\023\uffa6" +
    "\024\uffa6\025\uffa6\026\uffa6\030\uffa6\031\uffa6\037\uffa6\062" +
    "\uffa6\065\uffa6\001\002\000\056\002\uffa7\004\uffa7\005\uffa7" +
    "\006\uffa7\007\uffa7\010\uffa7\011\uffa7\012\uffa7\014\uffa7\015" +
    "\uffa7\017\uffa7\021\uffa7\022\uffa7\023\uffa7\024\uffa7\025\uffa7" +
    "\026\uffa7\030\uffa7\031\uffa7\037\uffa7\062\uffa7\065\uffa7\001" +
    "\002\000\040\002\uffe0\015\uffe0\017\uffe0\021\uffe0\022\uffe0" +
    "\023\uffe0\024\uffe0\025\uffe0\026\uffe0\030\uffe0\031\uffe0\037" +
    "\uffe0\062\uffe0\065\uffe0\067\103\001\002\000\040\002\uffe1" +
    "\015\uffe1\017\uffe1\021\uffe1\022\uffe1\023\uffe1\024\uffe1\025" +
    "\uffe1\026\uffe1\030\uffe1\031\uffe1\037\uffe1\062\uffe1\065\uffe1" +
    "\067\103\001\002\000\004\067\103\001\002\000\016\015" +
    "\253\017\252\021\016\062\055\065\004\066\260\001\002" +
    "\000\046\015\077\017\026\021\016\022\034\023\021\024" +
    "\017\025\030\026\031\030\006\031\007\032\070\033\073" +
    "\034\065\035\066\036\075\037\012\062\067\065\004\001" +
    "\002\000\010\020\uffbe\044\uffbe\067\uffc5\001\002\000\006" +
    "\020\uffb9\044\uffb9\001\002\000\010\020\uffc1\044\uffc1\067" +
    "\uffc9\001\002\000\006\020\uffb6\044\uffb6\001\002\000\006" +
    "\020\uffb7\044\uffb7\001\002\000\006\020\262\044\263\001" +
    "\002\000\050\002\uffbb\015\uffbb\017\uffbb\020\uffbb\021\uffbb" +
    "\022\uffbb\023\uffbb\024\uffbb\025\uffbb\026\uffbb\027\uffbb\030" +
    "\uffbb\031\uffbb\037\uffbb\041\uffbb\044\uffbb\062\uffbb\065\uffbb" +
    "\067\uffbb\001\002\000\016\015\253\017\252\021\016\062" +
    "\055\065\004\066\260\001\002\000\006\020\uffba\044\uffba" +
    "\001\002\000\004\015\272\001\002\000\004\015\271\001" +
    "\002\000\004\015\270\001\002\000\010\020\uffc0\044\uffc0" +
    "\067\uffc8\001\002\000\010\020\uffbf\044\uffbf\067\uffc6\001" +
    "\002\000\006\020\uffb8\044\uffb8\001\002\000\006\020\274" +
    "\044\263\001\002\000\010\020\uffb5\044\uffb5\067\uffbb\001" +
    "\002\000\004\015\276\001\002\000\036\002\ufffa\015\ufffa" +
    "\017\ufffa\021\ufffa\022\ufffa\023\ufffa\024\ufffa\025\ufffa\026" +
    "\ufffa\030\ufffa\031\ufffa\037\ufffa\062\ufffa\065\ufffa\001\002" +
    "\000\036\002\uffff\015\uffff\017\uffff\021\uffff\022\uffff\023" +
    "\uffff\024\uffff\025\uffff\026\uffff\030\uffff\031\uffff\037\uffff" +
    "\062\uffff\065\uffff\001\002\000\036\002\uffe6\015\uffe6\017" +
    "\uffe6\021\uffe6\022\uffe6\023\uffe6\024\uffe6\025\uffe6\026\uffe6" +
    "\030\uffe6\031\uffe6\037\uffe6\062\uffe6\065\uffe6\001\002\000" +
    "\034\015\077\017\026\021\016\022\034\023\021\024\017" +
    "\025\030\026\031\030\006\031\007\037\012\062\067\065" +
    "\004\001\002\000\004\015\305\001\002\000\004\015\304" +
    "\001\002\000\036\002\uffe5\015\uffe5\017\uffe5\021\uffe5\022" +
    "\uffe5\023\uffe5\024\uffe5\025\uffe5\026\uffe5\030\uffe5\031\uffe5" +
    "\037\uffe5\062\uffe5\065\uffe5\001\002\000\036\002\uffe7\015" +
    "\uffe7\017\uffe7\021\uffe7\022\uffe7\023\uffe7\024\uffe7\025\uffe7" +
    "\026\uffe7\030\uffe7\031\uffe7\037\uffe7\062\uffe7\065\uffe7\001" +
    "\002\000\036\002\uffe3\015\uffe3\017\uffe3\021\uffe3\022\uffe3" +
    "\023\uffe3\024\uffe3\025\uffe3\026\uffe3\030\uffe3\031\uffe3\037" +
    "\uffe3\062\uffe3\065\uffe3\001\002\000\034\015\077\017\026" +
    "\021\016\022\034\023\021\024\017\025\030\026\031\030" +
    "\006\031\007\037\012\062\067\065\004\001\002\000\004" +
    "\015\313\001\002\000\004\015\312\001\002\000\036\002" +
    "\uffe2\015\uffe2\017\uffe2\021\uffe2\022\uffe2\023\uffe2\024\uffe2" +
    "\025\uffe2\026\uffe2\030\uffe2\031\uffe2\037\uffe2\062\uffe2\065" +
    "\uffe2\001\002\000\036\002\uffe4\015\uffe4\017\uffe4\021\uffe4" +
    "\022\uffe4\023\uffe4\024\uffe4\025\uffe4\026\uffe4\030\uffe4\031" +
    "\uffe4\037\uffe4\062\uffe4\065\uffe4\001\002\000\010\015\126" +
    "\021\125\062\127\001\002\000\040\002\uff8f\015\uff8f\017" +
    "\uff8f\021\uff8f\022\uff8f\023\uff8f\024\uff8f\025\uff8f\026\uff8f" +
    "\027\uff8f\030\uff8f\031\uff8f\037\uff8f\062\uff8f\065\uff8f\001" +
    "\002\000\040\002\uff91\015\uff91\017\uff91\021\uff91\022\uff91" +
    "\023\uff91\024\uff91\025\uff91\026\uff91\027\317\030\uff91\031" +
    "\uff91\037\uff91\062\uff91\065\uff91\001\002\000\010\015\126" +
    "\021\125\062\127\001\002\000\040\002\uff90\015\uff90\017" +
    "\uff90\021\uff90\022\uff90\023\uff90\024\uff90\025\uff90\026\uff90" +
    "\027\uff90\030\uff90\031\uff90\037\uff90\062\uff90\065\uff90\001" +
    "\002\000\040\002\uffdf\015\uffdf\017\uffdf\021\uffdf\022\uffdf" +
    "\023\uffdf\024\uffdf\025\uffdf\026\uffdf\030\uffdf\031\uffdf\037" +
    "\uffdf\062\uffdf\065\uffdf\067\103\001\002\000\040\002\uffde" +
    "\015\uffde\017\uffde\021\uffde\022\uffde\023\uffde\024\uffde\025" +
    "\uffde\026\uffde\030\uffde\031\uffde\037\uffde\062\uffde\065\uffde" +
    "\067\103\001\002\000\040\002\uffdd\015\uffdd\017\uffdd\021" +
    "\uffdd\022\uffdd\023\uffdd\024\uffdd\025\uffdd\026\uffdd\030\uffdd" +
    "\031\uffdd\037\uffdd\062\uffdd\065\uffdd\067\103\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\321\000\050\003\041\004\021\005\017\006\024\007" +
    "\013\011\007\012\034\020\004\022\014\037\036\040\031" +
    "\041\026\042\032\043\037\044\022\045\010\046\012\054" +
    "\040\055\035\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\020\004\022\322\054\053\055\035\001\001\000" +
    "\012\020\004\022\321\054\053\055\035\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\020\004\022\320\054" +
    "\053\055\035\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\044\005\276\006\024" +
    "\007\013\011\007\012\034\020\004\022\014\037\036\040" +
    "\031\041\026\042\032\043\037\044\022\045\010\046\012" +
    "\054\040\055\035\001\001\000\002\001\001\000\022\010" +
    "\274\012\075\021\073\047\062\050\061\051\070\052\071" +
    "\053\063\001\001\000\002\001\001\000\020\020\004\022" +
    "\250\031\260\032\254\033\256\054\255\055\253\001\001" +
    "\000\002\001\001\000\012\020\004\022\247\054\053\055" +
    "\035\001\001\000\012\020\004\022\246\054\053\055\035" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\013" +
    "\215\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\014\043\001\001\000\002\001\001\000\016" +
    "\020\004\022\046\030\052\036\051\054\053\055\035\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\054\007\060\011\007\012\075\020\004\021\073\022" +
    "\014\037\036\040\031\041\026\042\032\043\037\044\022" +
    "\045\010\046\012\047\062\050\061\051\070\052\071\053" +
    "\063\054\053\055\035\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\020\004\022\046\036\057\054\053\055\035" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\020\004" +
    "\022\110\054\053\055\035\001\001\000\012\020\004\022" +
    "\107\054\053\055\035\001\001\000\002\001\001\000\012" +
    "\020\004\022\106\054\053\055\035\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\020\004\022\105\054\053" +
    "\055\035\001\001\000\002\001\001\000\012\020\004\022" +
    "\101\054\053\055\035\001\001\000\002\001\001\000\020" +
    "\012\075\021\073\047\062\050\061\051\070\052\071\053" +
    "\063\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\020\004\022\103\054\053\055\035\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\015\116\016\122\017\120\035\121" +
    "\001\001\000\002\001\001\000\042\007\175\010\177\011" +
    "\007\012\200\020\004\022\014\037\036\040\031\041\026" +
    "\042\032\043\037\044\022\045\010\046\012\054\053\055" +
    "\035\001\001\000\010\023\146\024\147\026\145\001\001" +
    "\000\010\016\122\017\120\035\141\001\001\000\004\026" +
    "\123\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\025\133\034\132\001\001\000\002\001" +
    "\001\000\036\007\127\011\007\020\004\022\014\037\036" +
    "\040\031\041\026\042\032\043\037\044\022\045\010\046" +
    "\012\054\053\055\035\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\034\136\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\015\140\016\122\017" +
    "\120\035\121\001\001\000\010\016\122\017\120\035\141" +
    "\001\001\000\002\001\001\000\012\015\143\016\122\017" +
    "\120\035\121\001\001\000\010\016\122\017\120\035\141" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\023\160\024\147\026\145" +
    "\001\001\000\010\023\157\024\147\026\145\001\001\000" +
    "\012\015\153\016\122\017\120\035\121\001\001\000\010" +
    "\016\122\017\120\035\141\001\001\000\012\015\155\016" +
    "\122\017\120\035\121\001\001\000\010\016\122\017\120" +
    "\035\141\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\026\174\001\001\000\004\026\173" +
    "\001\001\000\004\026\172\001\001\000\004\026\171\001" +
    "\001\000\004\026\170\001\001\000\004\026\167\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\020\004" +
    "\022\204\054\053\055\035\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\040\007\242\011\007" +
    "\012\243\020\004\022\014\037\036\040\031\041\026\042" +
    "\032\043\037\044\022\045\010\046\012\054\053\055\035" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\013" +
    "\241\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\013" +
    "\221\001\001\000\002\001\001\000\004\013\240\001\001" +
    "\000\004\013\237\001\001\000\004\013\236\001\001\000" +
    "\004\013\235\001\001\000\004\013\234\001\001\000\002" +
    "\001\001\000\004\013\233\001\001\000\004\013\232\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\020\004" +
    "\022\250\031\272\032\254\033\256\054\255\055\253\001" +
    "\001\000\054\007\264\011\007\012\266\020\004\021\265" +
    "\022\014\037\036\040\031\041\026\042\032\043\037\044" +
    "\022\045\010\046\012\047\062\050\061\051\070\052\071" +
    "\053\063\054\053\055\035\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\020" +
    "\004\022\250\032\263\033\256\054\255\055\253\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\040\007\301\011\007\012\302\020\004\022\014\037" +
    "\036\040\031\041\026\042\032\043\037\044\022\045\010" +
    "\046\012\054\053\055\035\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\040\007\307\011\007\012\310\020\004\022" +
    "\014\037\036\040\031\041\026\042\032\043\037\044\022" +
    "\045\010\046\012\054\053\055\035\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\026\314\027\315\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\026\317\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Analisis_Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Analisis_Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Analisis_Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




 String expresion="";
 public ParserTree parserTree;

// METODOS Y VARIABLES GLOBALES DEL PARSER, PUEDEN SER PUBLICAS O PRIVADAS

    public  String prueba = "";

    public void syntax_error(Symbol s){
        /**Metodo al que se llama automaticamente ante algun error sintactico.*/
        System.out.println("Error Sintactico en la Linea " + (s.right+1) +" Columna "+s.left+ ". Identificador " +s.value + " no reconocido." );
    }
             
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        /**Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores.*/
        System.out.println("Error Sintactico en la Linea " + (s.right+1)+ "Columna "+s.left+". Identificador " + s.value + " no reconocido.");
    }




}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Analisis_Sintactico$actions {


//METODOS Y VARIABLES QUE SOLO PUEDEN SER ACCEDIDAS DENTRO DEL PARSER
   public String actionCODE = "";



  public static final String  mas ="+",
menos   = "-",
por     = "*",
div     = "/",
mod     = "'mod'",
sqrt    = "'sqrt'",
pot     = "'pot'",
para    = "(",
parc    = ")",
dolar   =   "$",
let     =   "let",
corcha  =   "[",
corchc  =   "]",
porcentaje  =   "%",
calcular =  "calcular",
succ    =   "succ",
decc    =       "decc",
min     =   "min",
max     =   "max",
sum     =   "sum",
product =   "product",
revers  =   "revers",
impr    =   "impr",
par     =   "par",
asc     =   "asc",
desc    =   "desc",
length  =   "length",
llv1    =   "{",
llv2    =   "}",
masmas  =   "++",
si      =   "if",
entonces=   "then",
coma    =   ",",
t_else  =   "else",
end     =   "end",
igual   =   "=",
igualigual= "==",
dosp    =   ":",
caso    =   "case",
menorque=   "<",
menorIgual= "<=",
mayorque=   ">",
mayorIgual= ">=",
diferente = "!=",
andd      = "&&",
orr       = "||",
admiracionadmiracion    = "!!",
 num = "num",
 cadena = "cadena",
 caracter= "caracter",        
  lista = "lista", ID = "Id",ndecimal = "ndecimal";



  public static final String  INICIO = "INICIO", HASKELL = "HASKELL", 
HASKELLCUERPO = "HASKELLCUERPO",
CREARFUNCION = "CREARFUNCION",
FUNCIONHASKELL = "FUNCIONHASKELL",
CREARARREGLO = "CREARARREGLO",
GETINDICELISTA = "GETINDICELISTA",

LLAMARFUNCION= "LLAMARFUNCION",
EXP = "EXP",
VAR= "VAR",
CUERPOFUNCION = "CUERPOFUNCION",
IF = "IF",
CASE = "CASE",
ARREGLO= "ARREGLO",
LIST = "LIST",
LIST1 = "LIST1",
BOOL1 = "BOOL1",
BOOL2 = "BOOL2",
SWICH = "SWICH",
NUMERO = "NUMERO",
INDICE = "INDICE",PARAMETRO3 = "PARAMETRO3",
PARAMETRO = "PARAMETRO",
PARAMETRO2 = "PARAMETRO2" ,
LIST3 = "LIST3",
VALORESPUNT = "VALORESPUNT",
CUERPOFUNCION1 = "CUERPOFUNCION1",
PARAMETRO4 = "PARAMETRO4",
CALCULAR = "CALCULAR"  
,SUCC = "SUCC"  
,DECC = "DECC" 
,MIN = "MIN"   
,MAX  = "MAX" 
,LENG = "LENG " 
,PRODUCT = "PRODUCT" 
  , SUM = "SUM",
REVERS="REVERS",
IMPR = "IMPR",
PAR= "PAR",
ASC= "ASC", 
DESC = "DESC",
CONCATENAR = "CONCATENAR",OPLIST2 = "OPLIST2";
 
 
 
 public final int _string = 0, _double = 1, _int = 2, _char =3, _bool  =3;




  private final Analisis_Sintactico parser;

  /** Constructor */
  CUP$Analisis_Sintactico$actions(Analisis_Sintactico parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Analisis_Sintactico$do_action(
    int                        CUP$Analisis_Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Analisis_Sintactico$parser,
    java.util.Stack            CUP$Analisis_Sintactico$stack,
    int                        CUP$Analisis_Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Analisis_Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Analisis_Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // INDICE ::= NUMERO 
            {
              NodeTree RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).right;
		NodeTree a = (NodeTree)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).value;
		
                        NodeTree nodoEXP = new NodeTree(new Term(INDICE));
                        ParserTree arbol = new ParserTree (nodoEXP); 
                        arbol.addChildren(a);
                        RESULT = arbol.root;      
                        
              CUP$Analisis_Sintactico$result = new java_cup.runtime.Symbol(21/*INDICE*/, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).left, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).right, RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // INDICE ::= INDICE admiracionadmiracion NUMERO 
            {
              NodeTree RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		NodeTree a = (NodeTree)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).right;
		NodeTree b = (NodeTree)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).value;
		
                                                    ParserTree arbol = new ParserTree (a);
                                                    arbol.addChildren(b);
                                                    RESULT = arbol.root;
                                                    
              CUP$Analisis_Sintactico$result = new java_cup.runtime.Symbol(21/*INDICE*/, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).right, RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // GETINDICELISTA ::= LIST1 admiracionadmiracion INDICE 
            {
              NodeTree RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		NodeTree a = (NodeTree)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).right;
		NodeTree b = (NodeTree)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).value;
		                    
                        NodeTree nodoEXP = new NodeTree(new Term(GETINDICELISTA));
                        ParserTree arbol = new ParserTree (nodoEXP);
                        arbol.addChildren(a,b); 
                        RESULT = arbol.root;
                    
              CUP$Analisis_Sintactico$result = new java_cup.runtime.Symbol(7/*GETINDICELISTA*/, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).right, RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // VALORESPUNT ::= tchar 
            {
              NodeTree RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).value;
		         
                        NodeTree nodo = new NodeTree(new Term(caracter), new Token(new Location(aleft, aright),a,_char));  
                        NodeTree nodoEXP = new NodeTree(new Term(VALORESPUNT));
                        ParserTree arbol = new ParserTree (nodoEXP);
                        arbol.addChildren(nodo); 
                        RESULT =  nodo;
                
              CUP$Analisis_Sintactico$result = new java_cup.runtime.Symbol(26/*VALORESPUNT*/, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).left, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).right, RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // VALORESPUNT ::= num 
            {
              NodeTree RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).value;
		
                        NodeTree nodo = new NodeTree(new Term(num), new Token(new Location(aleft, aright),a,_int));  
                        NodeTree nodoEXP = new NodeTree(new Term(VALORESPUNT));
                        ParserTree arbol = new ParserTree (nodoEXP);
                        arbol.addChildren(nodo); 
                        RESULT =  nodo;
                        
                
              CUP$Analisis_Sintactico$result = new java_cup.runtime.Symbol(26/*VALORESPUNT*/, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).left, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).right, RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // SWICH ::= VALORESPUNT dosp CUERPOFUNCION 
            {
              NodeTree RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		NodeTree a = (NodeTree)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).right;
		NodeTree b = (NodeTree)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).value;
		
                        NodeTree nodoEXP = new NodeTree(new Term(SWICH));
                        ParserTree arbol = new ParserTree (nodoEXP);
                        arbol.addChildren(a,b);
                        RESULT = arbol.root; 
                                        
              CUP$Analisis_Sintactico$result = new java_cup.runtime.Symbol(19/*SWICH*/, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).right, RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // SWICH ::= SWICH VALORESPUNT dosp CUERPOFUNCION 
            {
              NodeTree RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).right;
		NodeTree a = (NodeTree)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		NodeTree b = (NodeTree)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).right;
		NodeTree c = (NodeTree)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).value;
		NodeTree nodoEXP = new NodeTree(new Term(VALORESPUNT));
                        ParserTree arbol = new ParserTree (a);
                        arbol.addChildren(b,c);
                        RESULT = arbol.root;
        
              CUP$Analisis_Sintactico$result = new java_cup.runtime.Symbol(19/*SWICH*/, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).left, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).right, RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // CASE ::= caso NUMERO SWICH end 
            {
              NodeTree RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		NodeTree a = (NodeTree)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodeTree b = (NodeTree)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		                    
                        NodeTree nodoEXP = new NodeTree(new Term(CASE));
                        ParserTree arbol = new ParserTree (nodoEXP);
                        arbol.addChildren(a,b); 
                        RESULT = arbol.root;
                    
              CUP$Analisis_Sintactico$result = new java_cup.runtime.Symbol(13/*CASE*/, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).left, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).right, RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // IF ::= si BOOL1 entonces CUERPOFUNCION t_else CUERPOFUNCION end 
            {
              NodeTree RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)).right;
		NodeTree a = (NodeTree)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).right;
		NodeTree b = (NodeTree)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodeTree c = (NodeTree)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		                    
                        NodeTree nodoEXP = new NodeTree(new Term(IF));
                        ParserTree arbol = new ParserTree (nodoEXP);
                        arbol.addChildren(a,b,c); 
                        RESULT = arbol.root;
                    
              CUP$Analisis_Sintactico$result = new java_cup.runtime.Symbol(12/*IF*/, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).left, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).right, RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // NUMERO ::= porcentaje 
            {
              NodeTree RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).value;
		
                        NodeTree nodo = new NodeTree(new Term(porcentaje), new Token(new Location(aleft, aright),a)); 
                        NodeTree nodoEXP = new NodeTree(new Term(NUMERO));
                        ParserTree arbol = new ParserTree (nodoEXP);
                        arbol.addChildren(nodo); 
                        RESULT = arbol.root;
                    
              CUP$Analisis_Sintactico$result = new java_cup.runtime.Symbol(20/*NUMERO*/, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).left, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).right, RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // NUMERO ::= identificador 
            {
              NodeTree RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).value;
		
                        NodeTree nodo = new NodeTree(new Term(ID), new Token(new Location(aleft, aright),a)); 
                        NodeTree nodoEXP = new NodeTree(new Term(NUMERO));
                        ParserTree arbol = new ParserTree (nodoEXP);
                        arbol.addChildren(nodo); 
                        RESULT = arbol.root;

                    
              CUP$Analisis_Sintactico$result = new java_cup.runtime.Symbol(20/*NUMERO*/, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).left, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).right, RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // NUMERO ::= dolar FUNCIONHASKELL dolar 
            {
              NodeTree RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodeTree a = (NodeTree)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		
                        NodeTree nodoEXP = new NodeTree(new Term(NUMERO));
                        ParserTree arbol = new ParserTree (nodoEXP); 
                        arbol.addChildren(a);
                        RESULT = arbol.root;      
                        
              CUP$Analisis_Sintactico$result = new java_cup.runtime.Symbol(20/*NUMERO*/, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).right, RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // BOOL2 ::= NUMERO diferente NUMERO 
            {
              NodeTree RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		NodeTree c = (NodeTree)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).right;
		NodeTree b = (NodeTree)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).value;
		
                        NodeTree nodo = new NodeTree(new Term(diferente), new Token(new Location(aleft, aright),a));
                        NodeTree nodoEXP = new NodeTree(new Term(BOOL2));  
                        ParserTree arbol = new ParserTree (nodoEXP); 
                        arbol.addChildren(c, nodo, b);  
                        RESULT = arbol.root;
                    
              CUP$Analisis_Sintactico$result = new java_cup.runtime.Symbol(18/*BOOL2*/, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).right, RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // BOOL2 ::= NUMERO igualigual NUMERO 
            {
              NodeTree RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		NodeTree c = (NodeTree)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).right;
		NodeTree b = (NodeTree)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).value;
		
                        NodeTree nodo = new NodeTree(new Term(igualigual), new Token(new Location(aleft, aright),a));
                        NodeTree nodoEXP = new NodeTree(new Term(BOOL2));  
                        ParserTree arbol = new ParserTree (nodoEXP); 
                        arbol.addChildren(c, nodo, b);  
                        RESULT = arbol.root;
                    
              CUP$Analisis_Sintactico$result = new java_cup.runtime.Symbol(18/*BOOL2*/, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).right, RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // BOOL2 ::= NUMERO menorIgual NUMERO 
            {
              NodeTree RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		NodeTree c = (NodeTree)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).right;
		NodeTree b = (NodeTree)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).value;
		
                        NodeTree nodo = new NodeTree(new Term(menorIgual), new Token(new Location(aleft, aright),a));
                        NodeTree nodoEXP = new NodeTree(new Term(BOOL2));  
                        ParserTree arbol = new ParserTree (nodoEXP); 
                        arbol.addChildren(c, nodo, b);  
                        RESULT = arbol.root;
                    
              CUP$Analisis_Sintactico$result = new java_cup.runtime.Symbol(18/*BOOL2*/, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).right, RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // BOOL2 ::= NUMERO mayorIgual NUMERO 
            {
              NodeTree RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		NodeTree c = (NodeTree)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).right;
		NodeTree b = (NodeTree)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).value;
		
                        NodeTree nodo = new NodeTree(new Term(mayorIgual), new Token(new Location(aleft, aright),a));
                        NodeTree nodoEXP = new NodeTree(new Term(BOOL2));  
                        ParserTree arbol = new ParserTree (nodoEXP); 
                        arbol.addChildren(c, nodo, b);  
                        RESULT = arbol.root;
                    
              CUP$Analisis_Sintactico$result = new java_cup.runtime.Symbol(18/*BOOL2*/, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).right, RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // BOOL2 ::= NUMERO menorque NUMERO 
            {
              NodeTree RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		NodeTree c = (NodeTree)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).right;
		NodeTree b = (NodeTree)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).value;
		
                        NodeTree nodo = new NodeTree(new Term(menorque), new Token(new Location(aleft, aright),a));
                        NodeTree nodoEXP = new NodeTree(new Term(BOOL2));  
                        ParserTree arbol = new ParserTree (nodoEXP); 
                        arbol.addChildren(c, nodo, b);  
                        RESULT = arbol.root;
                    
              CUP$Analisis_Sintactico$result = new java_cup.runtime.Symbol(18/*BOOL2*/, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).right, RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // BOOL2 ::= NUMERO mayorque NUMERO 
            {
              NodeTree RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		NodeTree c = (NodeTree)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).right;
		NodeTree b = (NodeTree)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).value;
		
                        NodeTree nodo = new NodeTree(new Term(mayorque), new Token(new Location(aleft, aright),a));
                        NodeTree nodoEXP = new NodeTree(new Term(BOOL2));  
                        ParserTree arbol = new ParserTree (nodoEXP); 
                        arbol.addChildren(c, nodo, b);  
                        RESULT = arbol.root;
                    
              CUP$Analisis_Sintactico$result = new java_cup.runtime.Symbol(18/*BOOL2*/, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).right, RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // BOOL1 ::= BOOL2 
            {
              NodeTree RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).right;
		NodeTree a = (NodeTree)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).value;
		NodeTree nodoEXP = new NodeTree(new Term(BOOL1));  
                        ParserTree arbol = new ParserTree (nodoEXP); 
                        arbol.addChildren(a);  
                        RESULT = arbol.root;
                        
              CUP$Analisis_Sintactico$result = new java_cup.runtime.Symbol(17/*BOOL1*/, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).left, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).right, RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // BOOL1 ::= BOOL1 orr BOOL1 
            {
              NodeTree RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		NodeTree c = (NodeTree)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).right;
		NodeTree b = (NodeTree)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).value;
		
                        NodeTree nodo = new NodeTree(new Term(orr), new Token(new Location(aleft, aright),a));
                        NodeTree nodoEXP = new NodeTree(new Term(BOOL1));  
                        ParserTree arbol = new ParserTree (nodoEXP); 
                        arbol.addChildren(c, nodo, b);  
                        RESULT = arbol.root;
                    
              CUP$Analisis_Sintactico$result = new java_cup.runtime.Symbol(17/*BOOL1*/, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).right, RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // BOOL1 ::= BOOL1 andd BOOL1 
            {
              NodeTree RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		NodeTree c = (NodeTree)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).right;
		NodeTree b = (NodeTree)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).value;
		
                        NodeTree nodo = new NodeTree(new Term(andd), new Token(new Location(aleft, aright),a));
                        NodeTree nodoEXP = new NodeTree(new Term(BOOL1));  
                        ParserTree arbol = new ParserTree (nodoEXP); 
                        arbol.addChildren(c, nodo, b);  
                        RESULT = arbol.root;
                    
              CUP$Analisis_Sintactico$result = new java_cup.runtime.Symbol(17/*BOOL1*/, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).right, RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // EXP ::= tchar 
            {
              NodeTree RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).value;
		         
                        NodeTree nodo = new NodeTree(new Term(caracter), new Token(new Location(aleft, aright),a,_char));  
                        NodeTree nodoEXP = new NodeTree(new Term(EXP));
                        ParserTree arbol = new ParserTree (nodoEXP);
                        arbol.addChildren(nodo); 
                        RESULT = arbol.root;
                
              CUP$Analisis_Sintactico$result = new java_cup.runtime.Symbol(9/*EXP*/, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).left, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).right, RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // EXP ::= cadena 
            {
              NodeTree RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).value;
		       NodeTree nodo = new NodeTree(new Term(cadena), new Token(new Location(aleft, aright),a,_string));  
                        NodeTree nodoEXP = new NodeTree(new Term(EXP));
                        ParserTree arbol = new ParserTree (nodoEXP);
                        arbol.addChildren(nodo); 
                        RESULT = arbol.root;
                
              CUP$Analisis_Sintactico$result = new java_cup.runtime.Symbol(9/*EXP*/, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).left, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).right, RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // EXP ::= dolar LLAMARFUNCION dolar 
            {
              NodeTree RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodeTree a = (NodeTree)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		      
                        NodeTree nodoEXP = new NodeTree(new Term(EXP));
                        ParserTree arbol = new ParserTree (nodoEXP);
                        arbol.addChildren(a); 
                        RESULT = arbol.root;
                
              CUP$Analisis_Sintactico$result = new java_cup.runtime.Symbol(9/*EXP*/, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).right, RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // EXP ::= dolar FUNCIONHASKELL dolar 
            {
              NodeTree RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodeTree a = (NodeTree)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		      
                        NodeTree nodoEXP = new NodeTree(new Term(EXP));
                        ParserTree arbol = new ParserTree (nodoEXP);
                        arbol.addChildren(a); 
                        RESULT = arbol.root;
                
              CUP$Analisis_Sintactico$result = new java_cup.runtime.Symbol(9/*EXP*/, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).right, RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // EXP ::= porcentaje 
            {
              NodeTree RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).value;
		
                        NodeTree nodo = new NodeTree(new Term(porcentaje), new Token(new Location(aleft, aright),a)); 
                        NodeTree nodoEXP = new NodeTree(new Term(EXP));
                        ParserTree arbol = new ParserTree (nodoEXP);
                        arbol.addChildren(nodo); 
                        RESULT = arbol.root;
                    
              CUP$Analisis_Sintactico$result = new java_cup.runtime.Symbol(9/*EXP*/, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).left, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).right, RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // EXP ::= identificador 
            {
              NodeTree RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).value;
		
                        NodeTree nodo = new NodeTree(new Term(ID), new Token(new Location(aleft, aright),a)); 
                        NodeTree nodoEXP = new NodeTree(new Term(EXP));
                        ParserTree arbol = new ParserTree (nodoEXP);
                        arbol.addChildren(nodo); 
                        RESULT = arbol.root;
                    
              CUP$Analisis_Sintactico$result = new java_cup.runtime.Symbol(9/*EXP*/, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).left, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).right, RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // EXP ::= ndecimal 
            {
              NodeTree RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).value;
		
                        NodeTree nodo = new NodeTree(new Term(ndecimal), new Token(new Location(aleft, aright),a,_double)); 
                        NodeTree nodoEXP = new NodeTree(new Term(EXP));
                        ParserTree arbol = new ParserTree (nodoEXP);
                        arbol.addChildren(nodo); 
                        RESULT = arbol.root;
                
              CUP$Analisis_Sintactico$result = new java_cup.runtime.Symbol(9/*EXP*/, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).left, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).right, RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // EXP ::= num 
            {
              NodeTree RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).value;
		
                        NodeTree nodo = new NodeTree(new Term(num), new Token(new Location(aleft, aright),a,_int));  
                        NodeTree nodoEXP = new NodeTree(new Term(EXP));
                        ParserTree arbol = new ParserTree (nodoEXP);
                        arbol.addChildren(nodo); 
                        RESULT = arbol.root;
            
              CUP$Analisis_Sintactico$result = new java_cup.runtime.Symbol(9/*EXP*/, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).left, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).right, RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // EXP ::= para EXP parc 
            {
              NodeTree RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodeTree a = (NodeTree)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		RESULT = a;
              CUP$Analisis_Sintactico$result = new java_cup.runtime.Symbol(9/*EXP*/, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).right, RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // EXP ::= menos EXP 
            {
              NodeTree RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).right;
		NodeTree b = (NodeTree)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).value;
		  
                        NodeTree unario = new NodeTree(new Term(menos), new Token(new Location(aleft, aright),a)); 
                        NodeTree nodo = new NodeTree(new Term(EXP));  
                        ParserTree arbol = new ParserTree (nodo); 
                        arbol.addChildren(unario, b);  
                        RESULT = arbol.root;

                    
              CUP$Analisis_Sintactico$result = new java_cup.runtime.Symbol(9/*EXP*/, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).right, RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // EXP ::= EXP pot EXP 
            {
              NodeTree RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		NodeTree c = (NodeTree)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).right;
		NodeTree b = (NodeTree)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).value;
		
                        NodeTree nodo    = new NodeTree(new Term(pot), new Token(new Location(aleft, aright),a));
                        NodeTree nodoEXP = new NodeTree(new Term(EXP));  
                        ParserTree arbol = new ParserTree (nodoEXP); 
                        arbol.addChildren(c, nodo, b);  
                        RESULT = arbol.root;
                        
              CUP$Analisis_Sintactico$result = new java_cup.runtime.Symbol(9/*EXP*/, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).right, RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // EXP ::= EXP sqrt EXP 
            {
              NodeTree RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		NodeTree c = (NodeTree)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).right;
		NodeTree b = (NodeTree)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).value;
		
                        NodeTree nodo = new NodeTree(new Term(sqrt), new Token(new Location(aleft, aright),a));
                        NodeTree nodoEXP = new NodeTree(new Term(EXP));  
                        ParserTree arbol = new ParserTree (nodoEXP); 
                        arbol.addChildren(c, nodo, b);  
                        RESULT = arbol.root;
                        
              CUP$Analisis_Sintactico$result = new java_cup.runtime.Symbol(9/*EXP*/, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).right, RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // EXP ::= EXP mod EXP 
            {
              NodeTree RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		NodeTree c = (NodeTree)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).right;
		NodeTree b = (NodeTree)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).value;
		
                        NodeTree nodo = new NodeTree(new Term(mod), new Token(new Location(aleft, aright),a));
                        NodeTree nodoEXP = new NodeTree(new Term(EXP));  
                        ParserTree arbol = new ParserTree (nodoEXP); 
                        arbol.addChildren(c, nodo, b);  
                        RESULT = arbol.root;
                        
              CUP$Analisis_Sintactico$result = new java_cup.runtime.Symbol(9/*EXP*/, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).right, RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // EXP ::= EXP div EXP 
            {
              NodeTree RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		NodeTree c = (NodeTree)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).right;
		NodeTree b = (NodeTree)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).value;
		
                        NodeTree nodo = new NodeTree(new Term(div), new Token(new Location(aleft, aright),a));
                        NodeTree nodoEXP = new NodeTree(new Term(EXP));  
                        ParserTree arbol = new ParserTree (nodoEXP); 
                        arbol.addChildren(c, nodo, b);  
                        RESULT = arbol.root;
                        
              CUP$Analisis_Sintactico$result = new java_cup.runtime.Symbol(9/*EXP*/, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).right, RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // EXP ::= EXP por EXP 
            {
              NodeTree RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		NodeTree c = (NodeTree)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).right;
		NodeTree b = (NodeTree)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).value;
		
                        NodeTree nodo = new NodeTree(new Term(por), new Token(new Location(aleft, aright),a));
                        NodeTree nodoEXP = new NodeTree(new Term(EXP));  
                        ParserTree arbol = new ParserTree (nodoEXP); 
                        arbol.addChildren(c, nodo, b);  
                        RESULT = arbol.root;
                        
              CUP$Analisis_Sintactico$result = new java_cup.runtime.Symbol(9/*EXP*/, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).right, RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // EXP ::= EXP menos EXP 
            {
              NodeTree RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		NodeTree c = (NodeTree)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).right;
		NodeTree b = (NodeTree)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).value;
		
                        NodeTree nodo = new NodeTree(new Term(menos), new Token(new Location(aleft, aright),a));
                        NodeTree nodoEXP = new NodeTree(new Term(EXP));  
                        ParserTree arbol = new ParserTree (nodoEXP); 
                        arbol.addChildren(c, nodo, b);  
                        RESULT = arbol.root;
                        
              CUP$Analisis_Sintactico$result = new java_cup.runtime.Symbol(9/*EXP*/, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).right, RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // EXP ::= EXP mas EXP 
            {
              NodeTree RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		NodeTree c = (NodeTree)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).right;
		NodeTree b = (NodeTree)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).value;
		
                        NodeTree nodo = new NodeTree(new Term(mas), new Token(new Location(aleft, aright),a));
                        NodeTree nodoEXP = new NodeTree(new Term(EXP));  
                        ParserTree arbol = new ParserTree (nodoEXP); 
                        arbol.addChildren(c, nodo, b);  
                        RESULT = arbol.root;
                    
              CUP$Analisis_Sintactico$result = new java_cup.runtime.Symbol(9/*EXP*/, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).right, RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // PARAMETRO2 ::= corcha PARAMETRO corchc 
            {
              NodeTree RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodeTree a = (NodeTree)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		RESULT = a;
              CUP$Analisis_Sintactico$result = new java_cup.runtime.Symbol(24/*PARAMETRO2*/, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).right, RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // PARAMETRO2 ::= LIST3 
            {
              NodeTree RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).right;
		NodeTree a = (NodeTree)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).value;
		RESULT =a;
              CUP$Analisis_Sintactico$result = new java_cup.runtime.Symbol(24/*PARAMETRO2*/, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).left, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).right, RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // PARAMETRO2 ::= tchar 
            {
              NodeTree RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).value;
		         
                        NodeTree nodo = new NodeTree(new Term(caracter), new Token(new Location(aleft, aright),a,_char));  
                        NodeTree nodoEXP = new NodeTree(new Term(PARAMETRO2));
                        ParserTree arbol = new ParserTree (nodoEXP);
                        arbol.addChildren(nodo); 
                        //RESULT = arbol.root;
                        RESULT = nodo;
                
              CUP$Analisis_Sintactico$result = new java_cup.runtime.Symbol(24/*PARAMETRO2*/, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).left, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).right, RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // PARAMETRO2 ::= dolar FUNCIONHASKELL dolar 
            {
              NodeTree RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodeTree a = (NodeTree)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		RESULT = a;
              CUP$Analisis_Sintactico$result = new java_cup.runtime.Symbol(24/*PARAMETRO2*/, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).right, RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // PARAMETRO ::= PARAMETRO2 
            {
              NodeTree RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).right;
		NodeTree a = (NodeTree)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).value;
		
                        
                        NodeTree nodoEXP = new NodeTree(new Term(PARAMETRO));  
                        ParserTree arbol = new ParserTree (nodoEXP); 
                        arbol.addChildren(a);  
                        RESULT = arbol.root;
                    
              CUP$Analisis_Sintactico$result = new java_cup.runtime.Symbol(23/*PARAMETRO*/, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).left, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).right, RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // PARAMETRO ::= PARAMETRO coma PARAMETRO2 
            {
              NodeTree RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		NodeTree a = (NodeTree)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).right;
		NodeTree b = (NodeTree)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).value;
		 
                        ParserTree arbol = new ParserTree (a); 
                        arbol.addChildren(b);
                         RESULT = arbol.root;  

                    
              CUP$Analisis_Sintactico$result = new java_cup.runtime.Symbol(23/*PARAMETRO*/, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).right, RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ARREGLO ::= corcha PARAMETRO corchc 
            {
              NodeTree RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodeTree a = (NodeTree)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		
                        
                        NodeTree nodoEXP = new NodeTree(new Term(ARREGLO));  
                        ParserTree arbol = new ParserTree (nodoEXP); 
                        arbol.addChildren(a);  
                        RESULT = arbol.root;
                    
              CUP$Analisis_Sintactico$result = new java_cup.runtime.Symbol(14/*ARREGLO*/, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).right, RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // CREARARREGLO ::= let identificador LIST1 
            {
              NodeTree RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).right;
		NodeTree b = (NodeTree)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).value;
		
                        NodeTree nodo = new NodeTree(new Term(ID), new Token(new Location(aleft, aright),a));
                        NodeTree nodoEXP = new NodeTree(new Term(CREARARREGLO));  
                        ParserTree arbol = new ParserTree (nodoEXP); 
                        arbol.addChildren(nodo, b);  
                        RESULT = arbol.root;
                    
              CUP$Analisis_Sintactico$result = new java_cup.runtime.Symbol(6/*CREARARREGLO*/, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).right, RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // CONCATENAR ::= LIST1 masmas LIST1 
            {
              NodeTree RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		NodeTree c = (NodeTree)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).right;
		NodeTree b = (NodeTree)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).value;
		
                        NodeTree nodo = new NodeTree(new Term(masmas), new Token(new Location(aleft, aright),a));
                        NodeTree nodoEXP = new NodeTree(new Term(CONCATENAR));  
                        ParserTree arbol = new ParserTree (nodoEXP); 
                        arbol.addChildren(c, nodo, b);  
                        RESULT = arbol.root;
                    
              CUP$Analisis_Sintactico$result = new java_cup.runtime.Symbol(42/*CONCATENAR*/, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).right, RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // LIST3 ::= OPLIST2 
            {
              NodeTree RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).right;
		NodeTree a = (NodeTree)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).value;
		

                        NodeTree nodoEXP = new NodeTree(new Term(LIST1));
                        ParserTree arbol = new ParserTree (nodoEXP);
                        arbol.addChildren(a); 
                        RESULT = arbol.root;
              CUP$Analisis_Sintactico$result = new java_cup.runtime.Symbol(25/*LIST3*/, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).left, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).right, RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // LIST3 ::= dolar LIST dolar 
            {
              NodeTree RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).value;
		
                        NodeTree nodo = new NodeTree(new Term(ID), new Token(new Location(aleft, aright),a)); 
                        NodeTree nodoEXP = new NodeTree(new Term(LIST1));
                        ParserTree arbol = new ParserTree (nodoEXP);
                        arbol.addChildren(nodo); 
                        RESULT = arbol.root;
                    
              CUP$Analisis_Sintactico$result = new java_cup.runtime.Symbol(25/*LIST3*/, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).right, RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // LIST3 ::= dolar LLAMARFUNCION dolar 
            {
              NodeTree RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodeTree a = (NodeTree)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		
                        
                        NodeTree nodoEXP = new NodeTree(new Term(LIST1));
                        ParserTree arbol = new ParserTree (nodoEXP);
                        arbol.addChildren(a); 
                        RESULT = arbol.root;
                    
              CUP$Analisis_Sintactico$result = new java_cup.runtime.Symbol(25/*LIST3*/, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).right, RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // LIST3 ::= CONCATENAR 
            {
              NodeTree RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).right;
		NodeTree a = (NodeTree)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).value;
		
                        
                        NodeTree nodoEXP = new NodeTree(new Term(LIST1));
                        ParserTree arbol = new ParserTree (nodoEXP);
                        arbol.addChildren(a); 
                        RESULT = arbol.root;
                    
              CUP$Analisis_Sintactico$result = new java_cup.runtime.Symbol(25/*LIST3*/, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).left, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).right, RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // OPLIST2 ::= identificador 
            {
              NodeTree RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).value;
		
                        NodeTree nodo = new NodeTree(new Term(ID), new Token(new Location(aleft, aright),a)); 
                        NodeTree nodoEXP = new NodeTree(new Term(OPLIST2));
                        ParserTree arbol = new ParserTree (nodoEXP);
                        arbol.addChildren(nodo); 
                        RESULT = arbol.root;
                    
              CUP$Analisis_Sintactico$result = new java_cup.runtime.Symbol(43/*OPLIST2*/, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).left, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).right, RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // OPLIST2 ::= cadena 
            {
              NodeTree RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).value;
		      
                        NodeTree nodo = new NodeTree(new Term(cadena), new Token(new Location(aleft, aright),a,_string));  
                        NodeTree nodoEXP = new NodeTree(new Term(OPLIST2));
                        ParserTree arbol = new ParserTree (nodoEXP);
                        arbol.addChildren(nodo); 
                        RESULT = arbol.root;
                
              CUP$Analisis_Sintactico$result = new java_cup.runtime.Symbol(43/*OPLIST2*/, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).left, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).right, RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // OPLIST2 ::= porcentaje 
            {
              NodeTree RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).value;
		
                        NodeTree nodo = new NodeTree(new Term(porcentaje), new Token(new Location(aleft, aright),a)); 
                        NodeTree nodoEXP = new NodeTree(new Term(OPLIST2));
                        ParserTree arbol = new ParserTree (nodoEXP);
                        arbol.addChildren(nodo); 
                        RESULT = arbol.root;
                    
              CUP$Analisis_Sintactico$result = new java_cup.runtime.Symbol(43/*OPLIST2*/, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).left, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).right, RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // LIST1 ::= OPLIST2 
            {
              NodeTree RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).right;
		NodeTree a = (NodeTree)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).value;
		

                        NodeTree nodoEXP = new NodeTree(new Term(LIST1));
                        ParserTree arbol = new ParserTree (nodoEXP);
                        arbol.addChildren(a); 
                        RESULT = arbol.root;
                
              CUP$Analisis_Sintactico$result = new java_cup.runtime.Symbol(16/*LIST1*/, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).left, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).right, RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // LIST1 ::= dolar LIST dolar 
            {
              NodeTree RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodeTree a = (NodeTree)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		 NodeTree nodoEXP = new NodeTree(new Term(LIST1));
                        ParserTree arbol = new ParserTree (nodoEXP);
                        arbol.addChildren(a); 
                        RESULT = arbol.root;
                        
              CUP$Analisis_Sintactico$result = new java_cup.runtime.Symbol(16/*LIST1*/, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).right, RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // LIST1 ::= ARREGLO 
            {
              NodeTree RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).right;
		NodeTree a = (NodeTree)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).value;
		
                        
                        NodeTree nodoEXP = new NodeTree(new Term(LIST1));
                        ParserTree arbol = new ParserTree (nodoEXP);
                        arbol.addChildren(a); 
                        RESULT = arbol.root;
                    
              CUP$Analisis_Sintactico$result = new java_cup.runtime.Symbol(16/*LIST1*/, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).left, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).right, RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // LIST1 ::= dolar LLAMARFUNCION dolar 
            {
              NodeTree RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodeTree a = (NodeTree)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		
                        
                        NodeTree nodoEXP = new NodeTree(new Term(LIST1));
                        ParserTree arbol = new ParserTree (nodoEXP);
                        arbol.addChildren(a); 
                        RESULT = arbol.root;
                    
              CUP$Analisis_Sintactico$result = new java_cup.runtime.Symbol(16/*LIST1*/, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).right, RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // LIST1 ::= CONCATENAR 
            {
              NodeTree RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).right;
		NodeTree a = (NodeTree)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).value;
		 NodeTree nodoEXP = new NodeTree(new Term(LIST1));
                        ParserTree arbol = new ParserTree (nodoEXP);
                        arbol.addChildren(a); 
                        RESULT = arbol.root;
                        
              CUP$Analisis_Sintactico$result = new java_cup.runtime.Symbol(16/*LIST1*/, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).left, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).right, RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // LIST ::= DESC 
            {
              NodeTree RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).right;
		NodeTree a = (NodeTree)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).value;
		
                        NodeTree nodoEXP = new NodeTree(new Term(LIST));
                        ParserTree arbol = new ParserTree (nodoEXP); 
                        arbol.addChildren(a);
                        RESULT = arbol.root;      
                        
              CUP$Analisis_Sintactico$result = new java_cup.runtime.Symbol(15/*LIST*/, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).left, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).right, RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // LIST ::= ASC 
            {
              NodeTree RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).right;
		NodeTree a = (NodeTree)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).value;
		
                        NodeTree nodoEXP = new NodeTree(new Term(LIST));
                        ParserTree arbol = new ParserTree (nodoEXP); 
                        arbol.addChildren(a);
                        RESULT = arbol.root;      
                        
              CUP$Analisis_Sintactico$result = new java_cup.runtime.Symbol(15/*LIST*/, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).left, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).right, RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // LIST ::= PAR 
            {
              NodeTree RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).right;
		NodeTree a = (NodeTree)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).value;
		
                        NodeTree nodoEXP = new NodeTree(new Term(LIST));
                        ParserTree arbol = new ParserTree (nodoEXP); 
                        arbol.addChildren(a);
                        RESULT = arbol.root;      
                        
              CUP$Analisis_Sintactico$result = new java_cup.runtime.Symbol(15/*LIST*/, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).left, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).right, RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // LIST ::= IMPR 
            {
              NodeTree RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).right;
		NodeTree a = (NodeTree)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).value;
		
                        NodeTree nodoEXP = new NodeTree(new Term(LIST));
                        ParserTree arbol = new ParserTree (nodoEXP); 
                        arbol.addChildren(a);
                        RESULT = arbol.root;      
                        
              CUP$Analisis_Sintactico$result = new java_cup.runtime.Symbol(15/*LIST*/, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).left, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).right, RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // LIST ::= REVERS 
            {
              NodeTree RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).right;
		NodeTree a = (NodeTree)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).value;
		
                        NodeTree nodoEXP = new NodeTree(new Term(LIST));
                        ParserTree arbol = new ParserTree (nodoEXP); 
                        arbol.addChildren(a);
                        RESULT = arbol.root;      
                        
              CUP$Analisis_Sintactico$result = new java_cup.runtime.Symbol(15/*LIST*/, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).left, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).right, RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ASC ::= asc LIST1 
            {
              NodeTree RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).right;
		NodeTree b = (NodeTree)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).value;
		
                        NodeTree nodo = new NodeTree(new Term(asc), new Token(new Location(aleft, aright),a));
                        NodeTree nodoEXP = new NodeTree(new Term(ASC));  
                        ParserTree arbol = new ParserTree (nodoEXP); 
                        arbol.addChildren(nodo, b);  
                        RESULT = arbol.root;
                    
              CUP$Analisis_Sintactico$result = new java_cup.runtime.Symbol(40/*ASC*/, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).right, RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // DESC ::= desc LIST1 
            {
              NodeTree RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).right;
		NodeTree b = (NodeTree)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).value;
		
                        NodeTree nodo = new NodeTree(new Term(desc), new Token(new Location(aleft, aright),a));
                        NodeTree nodoEXP = new NodeTree(new Term(DESC));  
                        ParserTree arbol = new ParserTree (nodoEXP); 
                        arbol.addChildren(nodo, b);  
                        RESULT = arbol.root;
                    
              CUP$Analisis_Sintactico$result = new java_cup.runtime.Symbol(41/*DESC*/, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).right, RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // PAR ::= par LIST1 
            {
              NodeTree RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).right;
		NodeTree b = (NodeTree)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).value;
		
                        NodeTree nodo = new NodeTree(new Term(par), new Token(new Location(aleft, aright),a));
                        NodeTree nodoEXP = new NodeTree(new Term(PAR));  
                        ParserTree arbol = new ParserTree (nodoEXP); 
                        arbol.addChildren(nodo, b);  
                        RESULT = arbol.root;
                    
              CUP$Analisis_Sintactico$result = new java_cup.runtime.Symbol(39/*PAR*/, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).right, RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // IMPR ::= impr LIST1 
            {
              NodeTree RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).right;
		NodeTree b = (NodeTree)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).value;
		
                        NodeTree nodo = new NodeTree(new Term(impr), new Token(new Location(aleft, aright),a));
                        NodeTree nodoEXP = new NodeTree(new Term(IMPR));  
                        ParserTree arbol = new ParserTree (nodoEXP); 
                        arbol.addChildren(nodo, b);  
                        RESULT = arbol.root;
                    
              CUP$Analisis_Sintactico$result = new java_cup.runtime.Symbol(38/*IMPR*/, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).right, RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // REVERS ::= revers LIST1 
            {
              NodeTree RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).right;
		NodeTree b = (NodeTree)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).value;
		
                        NodeTree nodo = new NodeTree(new Term(revers), new Token(new Location(aleft, aright),a));
                        NodeTree nodoEXP = new NodeTree(new Term(REVERS));  
                        ParserTree arbol = new ParserTree (nodoEXP); 
                        arbol.addChildren(nodo, b);  
                        RESULT = arbol.root;
                    
              CUP$Analisis_Sintactico$result = new java_cup.runtime.Symbol(37/*REVERS*/, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).right, RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // FUNCIONHASKELL ::= GETINDICELISTA 
            {
              NodeTree RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).right;
		NodeTree a = (NodeTree)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).value;
		
                        NodeTree nodoEXP = new NodeTree(new Term(FUNCIONHASKELL));
                        ParserTree arbol = new ParserTree (nodoEXP); 
                        arbol.addChildren(a);
                        RESULT = arbol.root;      
                        
              CUP$Analisis_Sintactico$result = new java_cup.runtime.Symbol(5/*FUNCIONHASKELL*/, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).left, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).right, RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // FUNCIONHASKELL ::= SUM 
            {
              NodeTree RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).right;
		NodeTree a = (NodeTree)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).value;
		
                        NodeTree nodoEXP = new NodeTree(new Term(FUNCIONHASKELL));
                        ParserTree arbol = new ParserTree (nodoEXP); 
                        arbol.addChildren(a);
                        RESULT = arbol.root;      
                        
              CUP$Analisis_Sintactico$result = new java_cup.runtime.Symbol(5/*FUNCIONHASKELL*/, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).left, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).right, RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // FUNCIONHASKELL ::= PRODUCT 
            {
              NodeTree RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).right;
		NodeTree a = (NodeTree)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).value;
		
                        NodeTree nodoEXP = new NodeTree(new Term(FUNCIONHASKELL));
                        ParserTree arbol = new ParserTree (nodoEXP); 
                        arbol.addChildren(a);
                        RESULT = arbol.root;      
                        
              CUP$Analisis_Sintactico$result = new java_cup.runtime.Symbol(5/*FUNCIONHASKELL*/, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).left, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).right, RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // FUNCIONHASKELL ::= LENG 
            {
              NodeTree RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).right;
		NodeTree a = (NodeTree)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).value;
		
                        NodeTree nodoEXP = new NodeTree(new Term(FUNCIONHASKELL));
                        ParserTree arbol = new ParserTree (nodoEXP); 
                        arbol.addChildren(a);
                        RESULT = arbol.root;      
                        
              CUP$Analisis_Sintactico$result = new java_cup.runtime.Symbol(5/*FUNCIONHASKELL*/, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).left, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).right, RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // FUNCIONHASKELL ::= MAX 
            {
              NodeTree RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).right;
		NodeTree a = (NodeTree)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).value;
		
                        NodeTree nodoEXP = new NodeTree(new Term(FUNCIONHASKELL));
                        ParserTree arbol = new ParserTree (nodoEXP); 
                        arbol.addChildren(a);
                        RESULT = arbol.root;      
                        
              CUP$Analisis_Sintactico$result = new java_cup.runtime.Symbol(5/*FUNCIONHASKELL*/, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).left, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).right, RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // FUNCIONHASKELL ::= MIN 
            {
              NodeTree RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).right;
		NodeTree a = (NodeTree)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).value;
		
                        NodeTree nodoEXP = new NodeTree(new Term(FUNCIONHASKELL));
                        ParserTree arbol = new ParserTree (nodoEXP); 
                        arbol.addChildren(a);
                        RESULT = arbol.root;      
                        
              CUP$Analisis_Sintactico$result = new java_cup.runtime.Symbol(5/*FUNCIONHASKELL*/, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).left, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).right, RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // FUNCIONHASKELL ::= DECC 
            {
              NodeTree RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).right;
		NodeTree a = (NodeTree)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).value;
		
                        NodeTree nodoEXP = new NodeTree(new Term(FUNCIONHASKELL));
                        ParserTree arbol = new ParserTree (nodoEXP); 
                        arbol.addChildren(a);
                        RESULT = arbol.root;      
                        
              CUP$Analisis_Sintactico$result = new java_cup.runtime.Symbol(5/*FUNCIONHASKELL*/, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).left, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).right, RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // FUNCIONHASKELL ::= SUCC 
            {
              NodeTree RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).right;
		NodeTree a = (NodeTree)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).value;
		
                        NodeTree nodoEXP = new NodeTree(new Term(FUNCIONHASKELL));
                        ParserTree arbol = new ParserTree (nodoEXP); 
                        arbol.addChildren(a);
                        RESULT = arbol.root;      
                        
              CUP$Analisis_Sintactico$result = new java_cup.runtime.Symbol(5/*FUNCIONHASKELL*/, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).left, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).right, RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // FUNCIONHASKELL ::= CALCULAR 
            {
              NodeTree RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).right;
		NodeTree a = (NodeTree)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).value;
		
                        NodeTree nodoEXP = new NodeTree(new Term(FUNCIONHASKELL));
                        ParserTree arbol = new ParserTree (nodoEXP); 
                        arbol.addChildren(a);
                        RESULT = arbol.root;      
                        
              CUP$Analisis_Sintactico$result = new java_cup.runtime.Symbol(5/*FUNCIONHASKELL*/, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).left, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).right, RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // SUM ::= sum LIST1 
            {
              NodeTree RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).right;
		NodeTree b = (NodeTree)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).value;
		
                        NodeTree nodo = new NodeTree(new Term(length), new Token(new Location(aleft, aright),a));
                        NodeTree nodoEXP = new NodeTree(new Term(LENG));  
                        ParserTree arbol = new ParserTree (nodoEXP); 
                        arbol.addChildren( b);  //arbol.addChildren(nodo, b); 
                        RESULT = arbol.root;
                    
              CUP$Analisis_Sintactico$result = new java_cup.runtime.Symbol(36/*SUM*/, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).right, RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // PRODUCT ::= product LIST1 
            {
              NodeTree RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).right;
		NodeTree b = (NodeTree)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).value;
		
                        NodeTree nodo = new NodeTree(new Term(length), new Token(new Location(aleft, aright),a));
                        NodeTree nodoEXP = new NodeTree(new Term(LENG));  
                        ParserTree arbol = new ParserTree (nodoEXP); 
                        arbol.addChildren( b);  //arbol.addChildren(nodo, b);  
                        RESULT = arbol.root;
                    
              CUP$Analisis_Sintactico$result = new java_cup.runtime.Symbol(35/*PRODUCT*/, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).right, RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // LENG ::= length LIST1 
            {
              NodeTree RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).right;
		NodeTree b = (NodeTree)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).value;
		
                        NodeTree nodo = new NodeTree(new Term(length), new Token(new Location(aleft, aright),a));
                        NodeTree nodoEXP = new NodeTree(new Term(LENG));  
                        ParserTree arbol = new ParserTree (nodoEXP); 
                        arbol.addChildren( b);  //arbol.addChildren(nodo, b);  
                        RESULT = arbol.root;
                    
              CUP$Analisis_Sintactico$result = new java_cup.runtime.Symbol(34/*LENG*/, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).right, RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // MAX ::= max LIST1 
            {
              NodeTree RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).right;
		NodeTree b = (NodeTree)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).value;
		
                        NodeTree nodo = new NodeTree(new Term(max), new Token(new Location(aleft, aright),a));
                        NodeTree nodoEXP = new NodeTree(new Term(MAX));  
                        ParserTree arbol = new ParserTree (nodoEXP); 
                        arbol.addChildren( b);  //arbol.addChildren(nodo, b);
                        RESULT = arbol.root;
                    
              CUP$Analisis_Sintactico$result = new java_cup.runtime.Symbol(33/*MAX*/, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).right, RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // MIN ::= min LIST1 
            {
              NodeTree RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).right;
		NodeTree b = (NodeTree)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).value;
		
                        NodeTree nodo = new NodeTree(new Term(min), new Token(new Location(aleft, aright),a));
                        NodeTree nodoEXP = new NodeTree(new Term(MIN));  
                        ParserTree arbol = new ParserTree (nodoEXP); 
                        arbol.addChildren(b);  //arbol.addChildren(nodo, b);  
                        RESULT = arbol.root;
                    
              CUP$Analisis_Sintactico$result = new java_cup.runtime.Symbol(32/*MIN*/, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).right, RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // DECC ::= decc dolar LLAMARFUNCION dolar 
            {
              NodeTree RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodeTree b = (NodeTree)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		
                        NodeTree nodo = new NodeTree(new Term(decc), new Token(new Location(aleft, aright),a));
                        NodeTree nodoEXP = new NodeTree(new Term(DECC));  
                        ParserTree arbol = new ParserTree (nodoEXP); 
                        arbol.addChildren(b);  //arbol.addChildren(nodo, b);  
                        RESULT = arbol.root;
                    
              CUP$Analisis_Sintactico$result = new java_cup.runtime.Symbol(31/*DECC*/, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).left, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).right, RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // DECC ::= decc porcentaje 
            {
              NodeTree RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).value;
		
                        NodeTree nodo = new NodeTree(new Term(decc), new Token(new Location(aleft, aright),a));
                        NodeTree nodo1 = new NodeTree(new Term(porcentaje), new Token(new Location(bleft, bright),b));
                        NodeTree nodoEXP = new NodeTree(new Term(DECC));  
                        ParserTree arbol = new ParserTree (nodoEXP); 
                        arbol.addChildren(nodo1);  //arbol.addChildren(nodo, nodo1);  
                        RESULT = arbol.root;
                    
              CUP$Analisis_Sintactico$result = new java_cup.runtime.Symbol(31/*DECC*/, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).right, RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DECC ::= decc dolar FUNCIONHASKELL dolar 
            {
              NodeTree RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodeTree b = (NodeTree)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		
                        NodeTree nodo = new NodeTree(new Term(decc), new Token(new Location(aleft, aright),a));
                        NodeTree nodoEXP = new NodeTree(new Term(DECC));  
                        ParserTree arbol = new ParserTree (nodoEXP); 
                        arbol.addChildren(b);  //arbol.addChildren(nodo, b);  
                        RESULT = arbol.root;
                    
              CUP$Analisis_Sintactico$result = new java_cup.runtime.Symbol(31/*DECC*/, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).left, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).right, RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // SUCC ::= succ dolar LLAMARFUNCION dolar 
            {
              NodeTree RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodeTree b = (NodeTree)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		
                        NodeTree nodo = new NodeTree(new Term(succ), new Token(new Location(aleft, aright),a));
                        NodeTree nodoEXP = new NodeTree(new Term(SUCC));  
                        ParserTree arbol = new ParserTree (nodoEXP); 
                        arbol.addChildren(b);//arbol.addChildren(nodo, b);  
                        RESULT = arbol.root;
                    
              CUP$Analisis_Sintactico$result = new java_cup.runtime.Symbol(30/*SUCC*/, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).left, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).right, RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // SUCC ::= succ porcentaje 
            {
              NodeTree RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).value;
		
                        NodeTree nodo = new NodeTree(new Term(succ), new Token(new Location(aleft, aright),a));
                        NodeTree nodo1 = new NodeTree(new Term(porcentaje), new Token(new Location(bleft, bright),b));
                        NodeTree nodoEXP = new NodeTree(new Term(SUCC));  
                        ParserTree arbol = new ParserTree (nodoEXP); 
                        arbol.addChildren( nodo1); //arbol.addChildren(nodo, nodo1);  
                        RESULT = arbol.root;
                    
              CUP$Analisis_Sintactico$result = new java_cup.runtime.Symbol(30/*SUCC*/, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).right, RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // SUCC ::= succ dolar FUNCIONHASKELL dolar 
            {
              NodeTree RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodeTree b = (NodeTree)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		
                        NodeTree nodo = new NodeTree(new Term(succ), new Token(new Location(aleft, aright),a));
                        NodeTree nodoEXP = new NodeTree(new Term(SUCC));  
                        ParserTree arbol = new ParserTree (nodoEXP); 
                        arbol.addChildren(b);  //arbol.addChildren(nodo, b);  
                        RESULT = arbol.root;
                    
              CUP$Analisis_Sintactico$result = new java_cup.runtime.Symbol(30/*SUCC*/, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).left, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).right, RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // CALCULAR ::= calcular EXP 
            {
              NodeTree RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).right;
		NodeTree b = (NodeTree)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).value;
		
                        NodeTree nodo = new NodeTree(new Term(calcular), new Token(new Location(aleft, aright),a));
                        NodeTree nodoEXP = new NodeTree(new Term(CALCULAR));  
                        ParserTree arbol = new ParserTree (nodoEXP); 
                        arbol.addChildren(b);  //arbol.addChildren(nodo, b);  
                        RESULT = arbol.root;
                    
              CUP$Analisis_Sintactico$result = new java_cup.runtime.Symbol(29/*CALCULAR*/, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).right, RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // CUERPOFUNCION1 ::= dolar CREARARREGLO dolar 
            {
              NodeTree RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodeTree a = (NodeTree)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		RESULT = a;
              CUP$Analisis_Sintactico$result = new java_cup.runtime.Symbol(27/*CUERPOFUNCION1*/, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).right, RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // CUERPOFUNCION1 ::= dolar FUNCIONHASKELL dolar 
            {
              NodeTree RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodeTree a = (NodeTree)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		RESULT = a;
              CUP$Analisis_Sintactico$result = new java_cup.runtime.Symbol(27/*CUERPOFUNCION1*/, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).right, RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // CUERPOFUNCION1 ::= dolar LLAMARFUNCION dolar 
            {
              NodeTree RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodeTree a = (NodeTree)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		RESULT = a;
              CUP$Analisis_Sintactico$result = new java_cup.runtime.Symbol(27/*CUERPOFUNCION1*/, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).right, RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // CUERPOFUNCION1 ::= CASE 
            {
              NodeTree RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).right;
		NodeTree a = (NodeTree)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).value;
		RESULT = a; 
              CUP$Analisis_Sintactico$result = new java_cup.runtime.Symbol(27/*CUERPOFUNCION1*/, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).left, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).right, RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // CUERPOFUNCION1 ::= IF 
            {
              NodeTree RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).right;
		NodeTree a = (NodeTree)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).value;
		RESULT = a;
              CUP$Analisis_Sintactico$result = new java_cup.runtime.Symbol(27/*CUERPOFUNCION1*/, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).left, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).right, RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // CUERPOFUNCION ::= CUERPOFUNCION1 
            {
              NodeTree RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).right;
		NodeTree a = (NodeTree)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).value;
		
                        NodeTree nodoEXP = new NodeTree(new Term(CUERPOFUNCION));  
                        ParserTree arbol = new ParserTree (nodoEXP); 
                        arbol.addChildren(a);  
                        RESULT = arbol.root;
        
              CUP$Analisis_Sintactico$result = new java_cup.runtime.Symbol(11/*CUERPOFUNCION*/, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).left, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).right, RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // CUERPOFUNCION ::= CUERPOFUNCION CUERPOFUNCION1 
            {
              NodeTree RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodeTree a = (NodeTree)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).right;
		NodeTree b = (NodeTree)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).value;
		
                        ParserTree arbol = new ParserTree (a); 
                        arbol.addChildren(b);  
                        RESULT = arbol.root;
                
              CUP$Analisis_Sintactico$result = new java_cup.runtime.Symbol(11/*CUERPOFUNCION*/, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).right, RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // VAR ::= identificador 
            {
              NodeTree RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).value;
		
                        NodeTree nodo = new NodeTree(new Term(ID), new Token(new Location(aleft, aright),a)); 
                        NodeTree nodoEXP = new NodeTree(new Term(VAR));
                        ParserTree arbol = new ParserTree (nodoEXP);
                        arbol.addChildren(nodo); 
                        RESULT = arbol.root;
                    
              CUP$Analisis_Sintactico$result = new java_cup.runtime.Symbol(10/*VAR*/, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).left, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).right, RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // VAR ::= VAR identificador 
            {
              NodeTree RESULT = null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodeTree b = (NodeTree)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).value;
		
                        NodeTree nodo = new NodeTree(new Term(ID), new Token(new Location(aleft, aright),a)); 
                        
                        ParserTree arbol = new ParserTree (b);
                        arbol.addChildren(nodo); 
                        RESULT = arbol.root;
                    
              CUP$Analisis_Sintactico$result = new java_cup.runtime.Symbol(10/*VAR*/, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).right, RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // CREARFUNCION ::= identificador VAR igual CUERPOFUNCION end 
            {
              NodeTree RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).right;
		NodeTree b = (NodeTree)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodeTree c = (NodeTree)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		NodeTree nodo = new NodeTree(new Term(ID), new Token(new Location(aleft, aright),a)); 
                        NodeTree nodoEXP = new NodeTree(new Term(CREARFUNCION));
                        ParserTree arbol = new ParserTree (nodoEXP);
                        arbol.addChildren(nodo,b,c); 
                        RESULT = arbol.root;
                    
              CUP$Analisis_Sintactico$result = new java_cup.runtime.Symbol(4/*CREARFUNCION*/, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).left, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).right, RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // PARAMETRO4 ::= LIST1 
            {
              NodeTree RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).right;
		NodeTree a = (NodeTree)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).value;
		RESULT = a;
              CUP$Analisis_Sintactico$result = new java_cup.runtime.Symbol(28/*PARAMETRO4*/, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).left, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).right, RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // PARAMETRO4 ::= dolar FUNCIONHASKELL dolar 
            {
              NodeTree RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodeTree a = (NodeTree)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		RESULT = a;
              CUP$Analisis_Sintactico$result = new java_cup.runtime.Symbol(28/*PARAMETRO4*/, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).right, RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // PARAMETRO3 ::= PARAMETRO4 
            {
              NodeTree RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).right;
		NodeTree a = (NodeTree)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).value;
		 NodeTree nodoEXP = new NodeTree(new Term(PARAMETRO3));
                            ParserTree arbol = new ParserTree (nodoEXP);
                            arbol.addChildren(a); 
                            RESULT = arbol.root;
                
              CUP$Analisis_Sintactico$result = new java_cup.runtime.Symbol(22/*PARAMETRO3*/, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).left, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).right, RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // PARAMETRO3 ::= PARAMETRO3 coma PARAMETRO4 
            {
              NodeTree RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		NodeTree a = (NodeTree)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).right;
		NodeTree b = (NodeTree)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).value;
		
                            ParserTree arbol = new ParserTree (a);
                            arbol.addChildren(b); 
                            RESULT = arbol.root;
              CUP$Analisis_Sintactico$result = new java_cup.runtime.Symbol(22/*PARAMETRO3*/, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).right, RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // LLAMARFUNCION ::= identificador llv1 llv2 
            {
              NodeTree RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		
                        NodeTree nodo = new NodeTree(new Term(ID), new Token(new Location(aleft, aright),a)); 
                        NodeTree nodoEXP = new NodeTree(new Term(LLAMARFUNCION));  
                        ParserTree arbol = new ParserTree (nodoEXP); 
                        arbol.addChildren(nodo);  
                        RESULT = arbol.root;
                        
              CUP$Analisis_Sintactico$result = new java_cup.runtime.Symbol(8/*LLAMARFUNCION*/, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).right, RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // LLAMARFUNCION ::= identificador llv1 PARAMETRO3 llv2 
            {
              NodeTree RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodeTree b = (NodeTree)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		
                        NodeTree nodo = new NodeTree(new Term(ID), new Token(new Location(aleft, aright),a)); 
                        NodeTree nodoEXP = new NodeTree(new Term(LLAMARFUNCION));  
                        ParserTree arbol = new ParserTree (nodoEXP); 
                        arbol.addChildren(nodo,b);  
                        RESULT = arbol.root;
                        
              CUP$Analisis_Sintactico$result = new java_cup.runtime.Symbol(8/*LLAMARFUNCION*/, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).left, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).right, RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // HASKELLCUERPO ::= CONCATENAR 
            {
              NodeTree RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).right;
		NodeTree a = (NodeTree)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).value;
		RESULT = a; 
              CUP$Analisis_Sintactico$result = new java_cup.runtime.Symbol(3/*HASKELLCUERPO*/, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).left, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).right, RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // HASKELLCUERPO ::= dolar CREARARREGLO dolar 
            {
              NodeTree RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodeTree a = (NodeTree)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		RESULT = a; 
              CUP$Analisis_Sintactico$result = new java_cup.runtime.Symbol(3/*HASKELLCUERPO*/, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).right, RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // HASKELLCUERPO ::= FUNCIONHASKELL 
            {
              NodeTree RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).right;
		NodeTree a = (NodeTree)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).value;
		RESULT = a; 
              CUP$Analisis_Sintactico$result = new java_cup.runtime.Symbol(3/*HASKELLCUERPO*/, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).left, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).right, RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // HASKELLCUERPO ::= CREARFUNCION 
            {
              NodeTree RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).right;
		NodeTree a = (NodeTree)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).value;
		RESULT = a; 
              CUP$Analisis_Sintactico$result = new java_cup.runtime.Symbol(3/*HASKELLCUERPO*/, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).left, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).right, RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // HASKELLCUERPO ::= LLAMARFUNCION 
            {
              NodeTree RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).right;
		NodeTree a = (NodeTree)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).value;
		RESULT = a; 
              CUP$Analisis_Sintactico$result = new java_cup.runtime.Symbol(3/*HASKELLCUERPO*/, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).left, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).right, RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // HASKELL ::= HASKELLCUERPO 
            {
              NodeTree RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).right;
		NodeTree a = (NodeTree)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).value;
		NodeTree nodoEXP = new NodeTree(new Term(HASKELL));  
                        ParserTree arbol = new ParserTree (nodoEXP); 
                        arbol.addChildren(a);  
                        RESULT = arbol.root;
                        
              CUP$Analisis_Sintactico$result = new java_cup.runtime.Symbol(2/*HASKELL*/, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).left, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).right, RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // HASKELL ::= HASKELL HASKELLCUERPO 
            {
              NodeTree RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodeTree a = (NodeTree)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).right;
		NodeTree b = (NodeTree)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).value;
		
                         
                        ParserTree arbol = new ParserTree (a); 
                        arbol.addChildren(b);  
                        RESULT = arbol.root;
                        
              CUP$Analisis_Sintactico$result = new java_cup.runtime.Symbol(2/*HASKELL*/, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).right, RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= HASKELL 
            {
              NodeTree RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).right;
		NodeTree a = (NodeTree)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).value;
		this.parser.parserTree = new ParserTree(a);
              CUP$Analisis_Sintactico$result = new java_cup.runtime.Symbol(1/*INICIO*/, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).left, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).right, RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodeTree start_val = (NodeTree)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Analisis_Sintactico$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$Analisis_Sintactico$parser.done_parsing();
          return CUP$Analisis_Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

