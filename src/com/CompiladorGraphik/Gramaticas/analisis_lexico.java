/* The following code was generated by JFlex 1.6.1 */

package com.CompiladorGraphik.Gramaticas;

import java_cup.runtime.Symbol;

import javax.swing.text.MutableAttributeSet;
import javax.swing.text.SimpleAttributeSet;
import javax.swing.text.StyleConstants;
import java.awt.Color;
import java_cup.sym;



/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>lexico.jflex</tt>
 */
public class analisis_lexico implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int EXPRESION = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\12\0\1\3\1\74\1\74\1\74\22\0\1\73\1\37\1\10\1\1"+
    "\2\0\1\30\1\0\1\14\1\16\1\13\1\11\1\24\1\12\1\5"+
    "\1\2\12\4\1\25\1\26\1\36\1\17\1\35\1\34\1\0\1\57"+
    "\1\6\1\63\1\64\3\6\1\67\2\6\1\71\1\60\1\66\2\6"+
    "\1\65\2\6\1\61\1\70\6\6\1\20\1\0\1\21\1\15\1\7"+
    "\1\0\1\44\1\52\1\54\1\43\1\41\1\45\1\55\1\62\1\53"+
    "\1\6\1\72\1\46\1\56\1\31\1\32\1\50\1\6\1\42\1\47"+
    "\1\33\1\51\1\40\4\6\1\22\1\27\1\23\7\0\1\74\u1fa2\0"+
    "\1\74\1\74\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\2\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\2\1\1\5\1\25"+
    "\1\26\1\27\1\1\24\5\1\30\1\31\2\0\1\32"+
    "\1\0\1\33\1\34\1\35\1\36\1\37\1\40\2\5"+
    "\1\41\1\42\1\43\21\5\1\44\12\5\1\0\1\45"+
    "\1\46\2\5\1\47\21\5\1\50\14\5\1\32\13\5"+
    "\1\51\11\5\1\52\2\5\1\53\3\5\1\54\3\5"+
    "\1\55\1\5\1\56\3\5\1\57\17\5\1\60\3\5"+
    "\1\61\2\5\1\62\2\5\1\63\3\5\1\64\5\5"+
    "\1\65\2\5\1\66\11\5\1\67\1\5\1\70\1\71"+
    "\3\5\1\72\6\5\1\73\4\5\1\74\2\5\1\75"+
    "\1\76\1\77\5\5\1\100\1\101\1\102\1\103\1\104"+
    "\3\5\1\105\1\106\1\107\1\110\1\5\1\111\6\5"+
    "\1\112";

  private static int [] zzUnpackAction() {
    int [] result = new int[270];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\75\0\172\0\267\0\172\0\364\0\u0131\0\u016e"+
    "\0\172\0\u01ab\0\u01e8\0\172\0\172\0\172\0\172\0\u0225"+
    "\0\172\0\172\0\172\0\172\0\172\0\172\0\172\0\u0262"+
    "\0\u029f\0\u02dc\0\172\0\u0319\0\u0356\0\u0393\0\u03d0\0\u040d"+
    "\0\u044a\0\u0487\0\u04c4\0\u0501\0\u053e\0\u057b\0\u05b8\0\u05f5"+
    "\0\u0632\0\u066f\0\u06ac\0\u06e9\0\u0726\0\u0763\0\u07a0\0\u07dd"+
    "\0\u081a\0\u0857\0\172\0\172\0\u0894\0\u08d1\0\172\0\u090e"+
    "\0\172\0\172\0\172\0\172\0\172\0\172\0\u094b\0\u0988"+
    "\0\172\0\172\0\172\0\u09c5\0\u0a02\0\u0a3f\0\u0a7c\0\u0ab9"+
    "\0\u0af6\0\u0b33\0\u0b70\0\u0bad\0\u0bea\0\u0c27\0\u0c64\0\u0ca1"+
    "\0\u0cde\0\u0d1b\0\u0d58\0\u0d95\0\u0dd2\0\u0e0f\0\u0e4c\0\u0e89"+
    "\0\u0ec6\0\u0f03\0\u0f40\0\u0f7d\0\u0fba\0\u0ff7\0\u1034\0\u1071"+
    "\0\u090e\0\u016e\0\u10ae\0\u10eb\0\u016e\0\u1128\0\u1165\0\u11a2"+
    "\0\u11df\0\u121c\0\u1259\0\u1296\0\u12d3\0\u1310\0\u134d\0\u138a"+
    "\0\u13c7\0\u1404\0\u1441\0\u147e\0\u14bb\0\u14f8\0\u016e\0\u1535"+
    "\0\u1572\0\u15af\0\u15ec\0\u1629\0\u1666\0\u16a3\0\u16e0\0\u171d"+
    "\0\u175a\0\u1797\0\u17d4\0\u08d1\0\u1811\0\u184e\0\u188b\0\u18c8"+
    "\0\u1905\0\u1942\0\u197f\0\u19bc\0\u19f9\0\u1a36\0\u1a73\0\u016e"+
    "\0\u1ab0\0\u1aed\0\u1b2a\0\u1b67\0\u1ba4\0\u1be1\0\u1c1e\0\u1c5b"+
    "\0\u1c98\0\u016e\0\u1cd5\0\u1d12\0\u016e\0\u1d4f\0\u1d8c\0\u1dc9"+
    "\0\u016e\0\u1e06\0\u1e43\0\u1e80\0\u016e\0\u1ebd\0\u016e\0\u1efa"+
    "\0\u1f37\0\u1f74\0\u016e\0\u1fb1\0\u1fee\0\u202b\0\u2068\0\u20a5"+
    "\0\u20e2\0\u211f\0\u215c\0\u2199\0\u21d6\0\u2213\0\u2250\0\u228d"+
    "\0\u22ca\0\u2307\0\u2344\0\u2381\0\u23be\0\u23fb\0\u016e\0\u2438"+
    "\0\u2475\0\u016e\0\u24b2\0\u24ef\0\u016e\0\u252c\0\u2569\0\u25a6"+
    "\0\u016e\0\u25e3\0\u2620\0\u265d\0\u269a\0\u26d7\0\u016e\0\u2714"+
    "\0\u2751\0\u016e\0\u278e\0\u27cb\0\u2808\0\u2845\0\u2882\0\u28bf"+
    "\0\u28fc\0\u2939\0\u2976\0\u016e\0\u29b3\0\u016e\0\u016e\0\u29f0"+
    "\0\u2a2d\0\u2a6a\0\u016e\0\u2aa7\0\u2ae4\0\u2b21\0\u2b5e\0\u2b9b"+
    "\0\u2bd8\0\u016e\0\u2c15\0\u2c52\0\u2c8f\0\u2ccc\0\u016e\0\u2d09"+
    "\0\u2d46\0\u016e\0\u016e\0\u016e\0\u2d83\0\u2dc0\0\u2dfd\0\u2e3a"+
    "\0\u2e77\0\u016e\0\u016e\0\u016e\0\u016e\0\u016e\0\u2eb4\0\u2ef1"+
    "\0\u2f2e\0\u016e\0\u016e\0\u016e\0\u016e\0\u2f6b\0\u016e\0\u2fa8"+
    "\0\u2fe5\0\u3022\0\u305f\0\u309c\0\u30d9\0\u016e";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[270];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\1\6\1\7\1\3\2\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\2\10\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\1\10\1\43\1\44\1\10\1\45\1\10"+
    "\1\46\1\47\1\50\1\51\1\10\1\52\1\10\1\53"+
    "\1\54\1\55\1\56\1\57\1\60\1\61\1\62\2\10"+
    "\1\6\1\0\10\63\1\64\64\63\75\0\2\65\1\66"+
    "\1\67\71\65\3\0\1\6\67\0\1\6\5\0\1\7"+
    "\1\70\2\10\21\0\3\10\4\0\33\10\6\0\1\10"+
    "\1\0\2\10\21\0\3\10\4\0\33\10\13\0\1\71"+
    "\75\0\1\72\101\0\1\73\104\0\1\74\74\0\1\75"+
    "\1\76\50\0\1\10\1\0\2\10\21\0\1\10\1\77"+
    "\1\10\4\0\11\10\1\100\21\10\21\0\1\101\74\0"+
    "\1\102\74\0\1\103\61\0\1\10\1\0\2\10\21\0"+
    "\3\10\4\0\1\10\1\104\2\10\1\105\26\10\6\0"+
    "\1\10\1\0\2\10\21\0\1\106\2\10\4\0\33\10"+
    "\6\0\1\10\1\0\2\10\21\0\3\10\4\0\1\10"+
    "\1\107\31\10\6\0\1\10\1\0\2\10\21\0\3\10"+
    "\4\0\1\10\1\110\31\10\6\0\1\10\1\0\2\10"+
    "\21\0\3\10\4\0\4\10\1\111\26\10\6\0\1\10"+
    "\1\0\2\10\21\0\3\10\4\0\6\10\1\112\24\10"+
    "\6\0\1\10\1\0\2\10\21\0\3\10\4\0\2\10"+
    "\1\113\6\10\1\114\21\10\6\0\1\10\1\0\2\10"+
    "\21\0\1\10\1\115\1\10\4\0\33\10\6\0\1\10"+
    "\1\0\2\10\21\0\1\116\2\10\4\0\16\10\1\117"+
    "\14\10\6\0\1\10\1\0\2\10\21\0\1\10\1\120"+
    "\1\10\4\0\4\10\1\121\26\10\6\0\1\10\1\0"+
    "\2\10\21\0\3\10\4\0\2\10\1\122\30\10\6\0"+
    "\1\10\1\0\2\10\21\0\3\10\4\0\20\10\1\123"+
    "\12\10\6\0\1\10\1\0\2\10\21\0\3\10\4\0"+
    "\1\10\1\124\11\10\1\125\17\10\6\0\1\10\1\0"+
    "\2\10\21\0\3\10\4\0\1\10\1\126\31\10\6\0"+
    "\1\10\1\0\2\10\21\0\1\10\1\127\1\10\4\0"+
    "\4\10\1\130\26\10\6\0\1\10\1\0\2\10\21\0"+
    "\1\10\1\131\1\10\4\0\1\10\1\132\31\10\6\0"+
    "\1\10\1\0\2\10\21\0\3\10\4\0\2\10\1\133"+
    "\1\10\1\134\26\10\6\0\1\10\1\0\2\10\21\0"+
    "\3\10\4\0\13\10\1\135\17\10\6\0\1\10\1\0"+
    "\2\10\21\0\3\10\4\0\4\10\1\136\26\10\6\0"+
    "\1\10\1\0\2\10\21\0\3\10\4\0\1\10\1\137"+
    "\31\10\2\0\3\65\1\67\71\65\2\66\1\140\1\67"+
    "\71\66\4\0\1\141\74\0\1\10\1\0\2\10\21\0"+
    "\2\10\1\142\4\0\33\10\6\0\1\10\1\0\2\10"+
    "\21\0\3\10\4\0\1\10\1\143\31\10\6\0\1\10"+
    "\1\0\2\10\21\0\3\10\4\0\2\10\1\144\30\10"+
    "\6\0\1\10\1\0\2\10\21\0\3\10\4\0\2\10"+
    "\1\145\11\10\1\146\16\10\6\0\1\10\1\0\2\10"+
    "\21\0\2\10\1\147\4\0\33\10\6\0\1\10\1\0"+
    "\2\10\21\0\2\10\1\150\4\0\33\10\6\0\1\10"+
    "\1\0\2\10\21\0\3\10\4\0\14\10\1\151\16\10"+
    "\6\0\1\10\1\0\2\10\21\0\3\10\4\0\6\10"+
    "\1\152\24\10\6\0\1\10\1\0\2\10\21\0\3\10"+
    "\4\0\4\10\1\153\26\10\6\0\1\10\1\0\2\10"+
    "\21\0\1\10\1\154\1\10\4\0\13\10\1\155\17\10"+
    "\6\0\1\10\1\0\2\10\21\0\3\10\4\0\12\10"+
    "\1\156\20\10\6\0\1\10\1\0\2\10\21\0\1\10"+
    "\1\157\1\10\4\0\33\10\6\0\1\10\1\0\2\10"+
    "\21\0\3\10\4\0\13\10\1\160\1\161\16\10\6\0"+
    "\1\10\1\0\2\10\21\0\3\10\4\0\10\10\1\162"+
    "\22\10\6\0\1\10\1\0\2\10\21\0\3\10\4\0"+
    "\6\10\1\163\24\10\6\0\1\10\1\0\2\10\21\0"+
    "\3\10\4\0\2\10\1\164\1\165\27\10\6\0\1\10"+
    "\1\0\2\10\21\0\3\10\4\0\4\10\1\166\26\10"+
    "\6\0\1\10\1\0\2\10\21\0\3\10\4\0\21\10"+
    "\1\167\11\10\6\0\1\10\1\0\2\10\21\0\3\10"+
    "\4\0\6\10\1\170\24\10\6\0\1\10\1\0\2\10"+
    "\21\0\1\171\2\10\4\0\33\10\6\0\1\10\1\0"+
    "\2\10\21\0\3\10\4\0\2\10\1\172\30\10\6\0"+
    "\1\10\1\0\2\10\21\0\1\173\2\10\4\0\33\10"+
    "\6\0\1\10\1\0\2\10\21\0\3\10\4\0\7\10"+
    "\1\174\23\10\6\0\1\10\1\0\2\10\21\0\1\175"+
    "\2\10\4\0\33\10\6\0\1\10\1\0\2\10\21\0"+
    "\3\10\4\0\5\10\1\176\25\10\6\0\1\10\1\0"+
    "\2\10\21\0\1\10\1\177\1\10\4\0\33\10\6\0"+
    "\1\10\1\0\2\10\21\0\3\10\4\0\2\10\1\200"+
    "\30\10\6\0\1\10\1\0\2\10\21\0\3\10\4\0"+
    "\1\10\1\201\31\10\6\0\1\10\1\0\2\10\21\0"+
    "\3\10\4\0\14\10\1\202\16\10\6\0\1\10\1\0"+
    "\2\10\21\0\3\10\4\0\2\10\1\203\30\10\2\0"+
    "\1\66\1\204\1\140\1\67\71\66\4\0\1\10\1\0"+
    "\2\10\21\0\3\10\4\0\1\205\32\10\6\0\1\10"+
    "\1\0\2\10\21\0\3\10\4\0\3\10\1\206\27\10"+
    "\6\0\1\10\1\0\2\10\21\0\3\10\4\0\13\10"+
    "\1\207\17\10\6\0\1\10\1\0\2\10\21\0\3\10"+
    "\4\0\1\10\1\210\31\10\6\0\1\10\1\0\2\10"+
    "\21\0\1\10\1\211\1\10\4\0\33\10\6\0\1\10"+
    "\1\0\2\10\21\0\3\10\4\0\13\10\1\212\17\10"+
    "\6\0\1\10\1\0\2\10\21\0\3\10\4\0\7\10"+
    "\1\213\23\10\6\0\1\10\1\0\2\10\21\0\3\10"+
    "\4\0\16\10\1\214\14\10\6\0\1\10\1\0\2\10"+
    "\21\0\2\10\1\215\4\0\33\10\6\0\1\10\1\0"+
    "\2\10\21\0\3\10\4\0\1\216\32\10\6\0\1\10"+
    "\1\0\2\10\21\0\3\10\4\0\6\10\1\217\24\10"+
    "\6\0\1\10\1\0\2\10\21\0\3\10\4\0\6\10"+
    "\1\220\24\10\6\0\1\10\1\0\2\10\21\0\3\10"+
    "\4\0\14\10\1\221\16\10\6\0\1\10\1\0\2\10"+
    "\21\0\3\10\4\0\6\10\1\222\24\10\6\0\1\10"+
    "\1\0\2\10\21\0\1\10\1\223\1\10\4\0\2\10"+
    "\1\224\30\10\6\0\1\10\1\0\2\10\21\0\3\10"+
    "\4\0\11\10\1\225\21\10\6\0\1\10\1\0\2\10"+
    "\21\0\3\10\4\0\4\10\1\226\26\10\6\0\1\10"+
    "\1\0\2\10\21\0\3\10\4\0\1\10\1\227\31\10"+
    "\6\0\1\10\1\0\2\10\21\0\3\10\4\0\10\10"+
    "\1\230\22\10\6\0\1\10\1\0\2\10\21\0\3\10"+
    "\4\0\1\10\1\231\31\10\6\0\1\10\1\0\2\10"+
    "\21\0\1\10\1\232\1\10\4\0\33\10\6\0\1\10"+
    "\1\0\2\10\21\0\3\10\4\0\1\10\1\233\31\10"+
    "\6\0\1\10\1\0\2\10\21\0\2\10\1\234\4\0"+
    "\33\10\6\0\1\10\1\0\2\10\21\0\1\10\1\235"+
    "\1\10\4\0\33\10\6\0\1\10\1\0\2\10\21\0"+
    "\3\10\4\0\3\10\1\236\27\10\6\0\1\10\1\0"+
    "\2\10\21\0\3\10\4\0\1\10\1\237\31\10\6\0"+
    "\1\10\1\0\2\10\21\0\3\10\4\0\14\10\1\240"+
    "\16\10\6\0\1\10\1\0\2\10\21\0\3\10\4\0"+
    "\4\10\1\241\26\10\6\0\1\10\1\0\2\10\21\0"+
    "\1\242\2\10\4\0\33\10\6\0\1\10\1\0\2\10"+
    "\21\0\3\10\4\0\1\10\1\243\31\10\6\0\1\10"+
    "\1\0\2\10\21\0\3\10\4\0\16\10\1\244\14\10"+
    "\6\0\1\10\1\0\2\10\21\0\1\10\1\245\1\10"+
    "\4\0\33\10\6\0\1\10\1\0\2\10\21\0\3\10"+
    "\4\0\4\10\1\246\26\10\6\0\1\10\1\0\2\10"+
    "\21\0\1\10\1\247\1\10\4\0\33\10\6\0\1\10"+
    "\1\0\2\10\21\0\3\10\4\0\2\10\1\250\30\10"+
    "\6\0\1\10\1\0\2\10\21\0\3\10\4\0\2\10"+
    "\1\251\30\10\6\0\1\10\1\0\2\10\21\0\3\10"+
    "\4\0\16\10\1\252\14\10\6\0\1\10\1\0\2\10"+
    "\21\0\1\10\1\253\1\10\4\0\33\10\6\0\1\10"+
    "\1\0\2\10\21\0\3\10\4\0\4\10\1\254\26\10"+
    "\6\0\1\10\1\0\2\10\21\0\3\10\4\0\1\10"+
    "\1\255\31\10\6\0\1\10\1\0\2\10\21\0\3\10"+
    "\4\0\4\10\1\256\26\10\6\0\1\10\1\0\2\10"+
    "\21\0\3\10\4\0\13\10\1\257\17\10\6\0\1\10"+
    "\1\0\2\10\21\0\3\10\4\0\13\10\1\260\17\10"+
    "\6\0\1\10\1\0\2\10\21\0\3\10\4\0\11\10"+
    "\1\261\21\10\6\0\1\10\1\0\2\10\21\0\3\10"+
    "\4\0\2\10\1\262\30\10\6\0\1\10\1\0\2\10"+
    "\21\0\3\10\4\0\13\10\1\263\17\10\6\0\1\10"+
    "\1\0\2\10\21\0\3\10\4\0\16\10\1\264\14\10"+
    "\6\0\1\10\1\0\2\10\21\0\3\10\4\0\14\10"+
    "\1\265\16\10\6\0\1\10\1\0\2\10\21\0\1\266"+
    "\2\10\4\0\33\10\6\0\1\10\1\0\2\10\21\0"+
    "\3\10\4\0\22\10\1\267\10\10\6\0\1\10\1\0"+
    "\2\10\21\0\3\10\4\0\14\10\1\270\16\10\6\0"+
    "\1\10\1\0\2\10\21\0\3\10\4\0\3\10\1\271"+
    "\27\10\6\0\1\10\1\0\2\10\21\0\3\10\4\0"+
    "\13\10\1\272\17\10\6\0\1\10\1\0\2\10\21\0"+
    "\3\10\4\0\1\10\1\273\31\10\6\0\1\10\1\0"+
    "\2\10\21\0\3\10\4\0\14\10\1\274\16\10\6\0"+
    "\1\10\1\0\2\10\21\0\3\10\4\0\1\10\1\275"+
    "\31\10\6\0\1\10\1\0\2\10\21\0\2\10\1\276"+
    "\4\0\33\10\6\0\1\10\1\0\2\10\21\0\3\10"+
    "\4\0\2\10\1\277\30\10\6\0\1\10\1\0\2\10"+
    "\21\0\3\10\4\0\13\10\1\300\17\10\6\0\1\10"+
    "\1\0\2\10\21\0\3\10\4\0\3\10\1\301\27\10"+
    "\6\0\1\10\1\0\2\10\21\0\1\10\1\302\1\10"+
    "\4\0\33\10\6\0\1\10\1\0\2\10\21\0\1\303"+
    "\2\10\4\0\33\10\6\0\1\10\1\0\2\10\21\0"+
    "\3\10\4\0\4\10\1\304\26\10\6\0\1\10\1\0"+
    "\2\10\21\0\3\10\4\0\2\10\1\305\30\10\6\0"+
    "\1\10\1\0\2\10\21\0\3\10\4\0\15\10\1\306"+
    "\15\10\6\0\1\10\1\0\2\10\21\0\3\10\4\0"+
    "\3\10\1\307\27\10\6\0\1\10\1\0\2\10\21\0"+
    "\3\10\4\0\14\10\1\310\16\10\6\0\1\10\1\0"+
    "\2\10\21\0\1\10\1\311\1\10\4\0\33\10\6\0"+
    "\1\10\1\0\2\10\21\0\3\10\4\0\13\10\1\312"+
    "\17\10\6\0\1\10\1\0\2\10\21\0\2\10\1\313"+
    "\4\0\33\10\6\0\1\10\1\0\2\10\21\0\3\10"+
    "\4\0\16\10\1\314\14\10\6\0\1\10\1\0\2\10"+
    "\21\0\1\315\2\10\4\0\33\10\6\0\1\10\1\0"+
    "\2\10\21\0\2\10\1\316\4\0\33\10\6\0\1\10"+
    "\1\0\2\10\21\0\3\10\4\0\4\10\1\317\26\10"+
    "\6\0\1\10\1\0\2\10\21\0\3\10\4\0\13\10"+
    "\1\320\17\10\6\0\1\10\1\0\2\10\21\0\3\10"+
    "\4\0\14\10\1\321\16\10\6\0\1\10\1\0\2\10"+
    "\21\0\3\10\4\0\4\10\1\322\26\10\6\0\1\10"+
    "\1\0\2\10\21\0\1\323\2\10\4\0\33\10\6\0"+
    "\1\10\1\0\2\10\21\0\3\10\4\0\23\10\1\324"+
    "\4\10\1\325\2\10\6\0\1\10\1\0\2\10\21\0"+
    "\2\10\1\326\4\0\33\10\6\0\1\10\1\0\2\10"+
    "\21\0\3\10\4\0\7\10\1\327\23\10\6\0\1\10"+
    "\1\0\2\10\21\0\3\10\4\0\2\10\1\330\30\10"+
    "\6\0\1\10\1\0\2\10\21\0\1\331\2\10\4\0"+
    "\33\10\6\0\1\10\1\0\2\10\21\0\3\10\4\0"+
    "\1\10\1\332\31\10\6\0\1\10\1\0\2\10\21\0"+
    "\3\10\4\0\4\10\1\333\26\10\6\0\1\10\1\0"+
    "\2\10\21\0\3\10\4\0\6\10\1\334\24\10\6\0"+
    "\1\10\1\0\2\10\21\0\3\10\4\0\13\10\1\335"+
    "\17\10\6\0\1\10\1\0\2\10\21\0\1\10\1\336"+
    "\1\10\4\0\33\10\6\0\1\10\1\0\2\10\21\0"+
    "\1\10\1\337\1\10\4\0\33\10\6\0\1\10\1\0"+
    "\2\10\21\0\3\10\4\0\2\10\1\340\30\10\6\0"+
    "\1\10\1\0\2\10\21\0\3\10\4\0\4\10\1\341"+
    "\26\10\6\0\1\10\1\0\2\10\21\0\3\10\4\0"+
    "\13\10\1\342\17\10\6\0\1\10\1\0\2\10\21\0"+
    "\3\10\4\0\4\10\1\343\26\10\6\0\1\10\1\0"+
    "\2\10\21\0\3\10\4\0\1\10\1\344\31\10\6\0"+
    "\1\10\1\0\2\10\21\0\3\10\4\0\32\10\1\345"+
    "\6\0\1\10\1\0\2\10\21\0\3\10\4\0\13\10"+
    "\1\346\17\10\6\0\1\10\1\0\2\10\21\0\3\10"+
    "\4\0\11\10\1\347\21\10\6\0\1\10\1\0\2\10"+
    "\21\0\3\10\4\0\4\10\1\350\26\10\6\0\1\10"+
    "\1\0\2\10\21\0\1\10\1\351\1\10\4\0\33\10"+
    "\6\0\1\10\1\0\2\10\21\0\1\10\1\352\1\10"+
    "\4\0\33\10\6\0\1\10\1\0\2\10\21\0\3\10"+
    "\4\0\4\10\1\353\26\10\6\0\1\10\1\0\2\10"+
    "\21\0\3\10\4\0\4\10\1\354\26\10\6\0\1\10"+
    "\1\0\2\10\21\0\3\10\4\0\4\10\1\355\26\10"+
    "\6\0\1\10\1\0\2\10\21\0\3\10\4\0\2\10"+
    "\1\356\30\10\6\0\1\10\1\0\2\10\21\0\3\10"+
    "\4\0\2\10\1\357\30\10\6\0\1\10\1\0\2\10"+
    "\21\0\3\10\4\0\3\10\1\360\27\10\6\0\1\10"+
    "\1\0\1\10\1\361\21\0\3\10\4\0\33\10\6\0"+
    "\1\10\1\0\2\10\21\0\3\10\4\0\2\10\1\362"+
    "\30\10\6\0\1\10\1\0\2\10\21\0\3\10\4\0"+
    "\2\10\1\363\30\10\6\0\1\10\1\0\2\10\21\0"+
    "\3\10\4\0\2\10\1\364\30\10\6\0\1\10\1\0"+
    "\2\10\21\0\3\10\4\0\4\10\1\365\26\10\6\0"+
    "\1\10\1\0\2\10\21\0\1\10\1\366\1\10\4\0"+
    "\33\10\6\0\1\10\1\0\2\10\21\0\3\10\4\0"+
    "\4\10\1\367\26\10\6\0\1\10\1\0\2\10\21\0"+
    "\3\10\4\0\3\10\1\370\27\10\6\0\1\10\1\0"+
    "\2\10\21\0\3\10\4\0\3\10\1\371\27\10\6\0"+
    "\1\10\1\0\2\10\21\0\3\10\4\0\2\10\1\372"+
    "\30\10\6\0\1\10\1\0\2\10\21\0\3\10\4\0"+
    "\7\10\1\373\23\10\6\0\1\10\1\0\2\10\21\0"+
    "\3\10\4\0\2\10\1\374\30\10\6\0\1\10\1\0"+
    "\2\10\21\0\1\10\1\375\1\10\4\0\33\10\6\0"+
    "\1\10\1\0\2\10\21\0\1\10\1\376\1\10\4\0"+
    "\33\10\6\0\1\10\1\0\2\10\21\0\3\10\4\0"+
    "\27\10\1\377\3\10\6\0\1\10\1\0\2\10\21\0"+
    "\3\10\4\0\2\10\1\u0100\30\10\6\0\1\10\1\0"+
    "\2\10\21\0\1\u0101\2\10\4\0\33\10\6\0\1\10"+
    "\1\0\2\10\21\0\3\10\4\0\2\10\1\u0102\30\10"+
    "\6\0\1\10\1\0\2\10\21\0\3\10\4\0\4\10"+
    "\1\u0103\26\10\6\0\1\10\1\0\2\10\21\0\1\10"+
    "\1\u0104\1\10\4\0\33\10\6\0\1\10\1\0\2\10"+
    "\21\0\3\10\4\0\31\10\1\u0105\1\10\6\0\1\10"+
    "\1\0\1\10\1\u0106\21\0\3\10\4\0\33\10\6\0"+
    "\1\10\1\0\2\10\21\0\3\10\4\0\4\10\1\u0107"+
    "\26\10\6\0\1\10\1\0\2\10\21\0\3\10\4\0"+
    "\5\10\1\u0108\25\10\6\0\1\10\1\0\2\10\21\0"+
    "\3\10\4\0\11\10\1\u0109\21\10\6\0\1\10\1\0"+
    "\2\10\21\0\1\u010a\2\10\4\0\33\10\6\0\1\10"+
    "\1\0\2\10\21\0\3\10\4\0\14\10\1\u010b\16\10"+
    "\6\0\1\10\1\0\2\10\21\0\3\10\4\0\13\10"+
    "\1\u010c\17\10\6\0\1\10\1\0\2\10\21\0\1\10"+
    "\1\u010d\1\10\4\0\33\10\6\0\1\10\1\0\2\10"+
    "\21\0\1\u010e\2\10\4\0\33\10\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[12566];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\1\1\1\11\3\1\1\11\2\1\4\11"+
    "\1\1\7\11\3\1\1\11\27\1\2\11\2\0\1\11"+
    "\1\0\6\11\2\1\3\11\34\1\1\0\256\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[270];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
//VARIALES Y METODOS DEL SCANER
String expresion="";

  






  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public analisis_lexico(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 198) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { System.out.println("Error lexico: "+yytext());
            }
          case 75: break;
          case 2: 
            { return new Symbol(simbolo.div,  yychar,yyline,yytext());
            }
          case 76: break;
          case 3: 
            { /* Se ignoran */
            }
          case 77: break;
          case 4: 
            { return new Symbol(simbolo.numero, yychar,yyline,new String(yytext()));
            }
          case 78: break;
          case 5: 
            { return new Symbol(simbolo.identificador, yychar,yyline, new String(yytext()));
            }
          case 79: break;
          case 6: 
            { yybegin (EXPRESION);
            }
          case 80: break;
          case 7: 
            { return new Symbol(simbolo.mas,  yychar,yyline,yytext());
            }
          case 81: break;
          case 8: 
            { return new Symbol(simbolo.menos,yychar,yyline,yytext());
            }
          case 82: break;
          case 9: 
            { return new Symbol(simbolo.por,  yychar,yyline,yytext());
            }
          case 83: break;
          case 10: 
            { return new Symbol(simbolo.parea, yychar,yyline,yytext());
            }
          case 84: break;
          case 11: 
            { return new Symbol(simbolo.eleva,yychar,yyline,yytext());
            }
          case 85: break;
          case 12: 
            { return new Symbol(simbolo.parec, yychar,yyline,yytext());
            }
          case 86: break;
          case 13: 
            { return new Symbol(simbolo.igual,yychar,yyline,yytext());
            }
          case 87: break;
          case 14: 
            { return new Symbol(simbolo.corcha,yychar,yyline,yytext());
            }
          case 88: break;
          case 15: 
            { return new Symbol(simbolo.corchc,yychar,yyline,yytext());
            }
          case 89: break;
          case 16: 
            { return new Symbol(simbolo.llv1,        yychar,yyline,yytext());
            }
          case 90: break;
          case 17: 
            { return new Symbol(simbolo.llv2,        yychar,yyline,yytext());
            }
          case 91: break;
          case 18: 
            { return new Symbol(simbolo.coma,        yychar,yyline,yytext());
            }
          case 92: break;
          case 19: 
            { return new Symbol(simbolo.dosp,        yychar,yyline,yytext());
            }
          case 93: break;
          case 20: 
            { return new Symbol(simbolo.puntocoma,	yychar,yyline,yytext());
            }
          case 94: break;
          case 21: 
            { return new Symbol(simbolo.  	finexp	,yychar,yyline,yytext());
            }
          case 95: break;
          case 22: 
            { return new Symbol(simbolo.mayorque,yychar,yyline,yytext());
            }
          case 96: break;
          case 23: 
            { return new Symbol(simbolo.menorque,yychar,yyline,yytext());
            }
          case 97: break;
          case 24: 
            { expresion +=yytext();
            }
          case 98: break;
          case 25: 
            { String temporal=expresion; 
        expresion=""; 
        yybegin(YYINITIAL); 
     
        return new Symbol(simbolo.expresion, yyline+1, yyline, temporal);
            }
          case 99: break;
          case 26: 
            { 
            }
          case 100: break;
          case 27: 
            { return new Symbol(simbolo.  	masmas	,yychar,yyline,yytext());
            }
          case 101: break;
          case 28: 
            { return new Symbol(simbolo.  	menosmenos	,yychar,yyline,yytext());
            }
          case 102: break;
          case 29: 
            { return new Symbol(simbolo.igualIgual,        yychar,yyline, yytext());
            }
          case 103: break;
          case 30: 
            { return new Symbol(simbolo.orr, 		yychar,yyline,yytext());
            }
          case 104: break;
          case 31: 
            { return new Symbol(simbolo.xorr,		yychar,yyline,yytext());
            }
          case 105: break;
          case 32: 
            { return new Symbol(simbolo.andd,		yychar,yyline,yytext());
            }
          case 106: break;
          case 33: 
            { return new Symbol(simbolo.mayorIgual,yychar,yyline,yytext());
            }
          case 107: break;
          case 34: 
            { return new Symbol(simbolo.menorIgual,        yychar,yyline, yytext());
            }
          case 108: break;
          case 35: 
            { return new Symbol(simbolo.noIgual,        yychar,yyline, yytext());
            }
          case 109: break;
          case 36: 
            { return new Symbol(simbolo.  	si	,yychar,yyline, yytext());
            }
          case 110: break;
          case 37: 
            { return new Symbol(simbolo.ndecimal, yychar, yyline, new String(yytext()));
            }
          case 111: break;
          case 38: 
            { return new Symbol(simbolo.nott,		yychar,yyline, yytext());
            }
          case 112: break;
          case 39: 
            { return new Symbol(simbolo.  	var	,yychar,yyline, yytext());
            }
          case 113: break;
          case 40: 
            { return new Symbol(simbolo.  	als	,yychar,yyline, yytext());
            }
          case 114: break;
          case 41: 
            { return new Symbol(simbolo.  	bool	,yychar,yyline, yytext());
            }
          case 115: break;
          case 42: 
            { return new Symbol(simbolo.  	sino	,yychar,yyline, yytext());
            }
          case 116: break;
          case 43: 
            { return new Symbol(simbolo.  	caso	,yychar,yyline, yytext());
            }
          case 117: break;
          case 44: 
            { return new Symbol(simbolo.  	para	,yychar,yyline, yytext());
            }
          case 118: break;
          case 45: 
            { return new Symbol(simbolo.  	nuevo	,yychar,yyline, yytext());
            }
          case 119: break;
          case 46: 
            { return new Symbol(simbolo.  	vacio	,yychar,yyline, yytext());
            }
          case 120: break;
          case 47: 
            { return new Symbol(simbolo.  	falso	,yychar,yyline, yytext());
            }
          case 121: break;
          case 48: 
            { return new Symbol(simbolo.  	donde	,yychar,yyline, yytext());
            }
          case 122: break;
          case 49: 
            { return new Symbol(simbolo.  	hacer	,yychar,yyline, yytext());
            }
          case 123: break;
          case 50: 
            { return new Symbol(simbolo.  	entero	,yychar,yyline, yytext());
            }
          case 124: break;
          case 51: 
            { return new Symbol(simbolo.  	llamar	,yychar,yyline, yytext());
            }
          case 125: break;
          case 52: 
            { return new Symbol(simbolo. inicio  ,yychar,yyline, yytext());
            }
          case 126: break;
          case 53: 
            { return new Symbol(simbolo.  	cadena	,yychar,yyline, yytext());
            }
          case 127: break;
          case 54: 
            { return new Symbol(simbolo.  	hereda	,yychar,yyline, yytext());
            }
          case 128: break;
          case 55: 
            { return new Symbol(simbolo.  	decimal	,yychar,yyline, yytext());
            }
          case 129: break;
          case 56: 
            { return new Symbol(simbolo.  	privado	,yychar,yyline, yytext());
            }
          case 130: break;
          case 57: 
            { return new Symbol(simbolo.  	publico	,yychar,yyline, yytext());
            }
          case 131: break;
          case 58: 
            { return new Symbol(simbolo.  	columna	,yychar,yyline, yytext());
            }
          case 132: break;
          case 59: 
            { return new Symbol(simbolo.  	dedefecto	,yychar,yyline, yytext());
            }
          case 133: break;
          case 60: 
            { return new Symbol(simbolo.  	retornar	,yychar,yyline, yytext());
            }
          case 134: break;
          case 61: 
            { return new Symbol(simbolo.  	importar	,yychar,yyline, yytext());
            }
          case 135: break;
          case 62: 
            { return new Symbol(simbolo.  	imprimir	,yychar,yyline, yytext());
            }
          case 136: break;
          case 63: 
            { return new Symbol(simbolo.  	caracter	,yychar,yyline, yytext());
            }
          case 137: break;
          case 64: 
            { return new Symbol(simbolo.  	procesar	,yychar,yyline, yytext());
            }
          case 138: break;
          case 65: 
            { return new Symbol(simbolo.  	mientras	,yychar,yyline, yytext());
            }
          case 139: break;
          case 66: 
            { return new Symbol(simbolo.  	terminar	,yychar,yyline, yytext());
            }
          case 140: break;
          case 67: 
            { return new Symbol(simbolo.  	verdadero	,yychar,yyline, yytext());
            }
          case 141: break;
          case 68: 
            { return new Symbol(simbolo.  	protegido	,yychar,yyline, yytext());
            }
          case 142: break;
          case 69: 
            { return new Symbol(simbolo.  	continuar	,yychar,yyline, yytext());
            }
          case 143: break;
          case 70: 
            { return new Symbol(simbolo.  	dondeCadena	,yychar,yyline, yytext());
            }
          case 144: break;
          case 71: 
            { return new Symbol(simbolo.  	dondeTodo	,yychar,yyline, yytext());
            }
          case 145: break;
          case 72: 
            { return new Symbol(simbolo. incluir_HK  ,yychar,yyline, yytext());
            }
          case 146: break;
          case 73: 
            { return new Symbol(simbolo.  	selecciona	,yychar,yyline, yytext());
            }
          case 147: break;
          case 74: 
            { return new Symbol(simbolo. graphikar_funcion  ,yychar,yyline, yytext());
            }
          case 148: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
